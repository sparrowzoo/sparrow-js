"use strict";(self["webpackChunkSparrow_PC_CHAT"]=self["webpackChunkSparrow_PC_CHAT"]||[]).push([["api_Chat_js"],{"../api/Chat.js":
/*!**********************!*\
  !*** ../api/Chat.js ***!
  \**********************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ChatApi": function() { return /* binding */ ChatApi; }\n/* harmony export */ });\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ "./node_modules/core-js/modules/es.array.push.js");\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__);\n\nconst SPARROW_BASE_URL = "http://server.im.academyshow.net/chat/v2";\nconst CONSUMER_BASE_URL = "http://studyapi.academyshow.net";\nconsole.log(CONSUMER_BASE_URL);\nconsole.log(SPARROW_BASE_URL);\nvar tokenConfig = {};\ntokenConfig[SPARROW_BASE_URL] = {\n  "login-token": function () {\n    return localStorage.getItem("token");\n  }\n};\ntokenConfig[CONSUMER_BASE_URL] = {\n  "X-Sugar-Token": function () {\n    return localStorage.getItem("token");\n  }\n};\nSparrow.ajax.tokenConfig = tokenConfig;\nconst ChatApi = {\n  getSession: function () {\n    return Sparrow.http.syncPost(SPARROW_BASE_URL + "/sessions");\n  },\n  getUserId: async function () {\n    return await Sparrow.http.syncPost(SPARROW_BASE_URL + "/get-user-id");\n  },\n  getContacts: async function () {\n    return await Sparrow.http.syncPost(SPARROW_BASE_URL + "/contacts");\n  },\n  setRead: function (session, vue) {\n    const params = {\n      sessionKey: session.key\n    };\n    return Sparrow.http.syncPost(SPARROW_BASE_URL + "/session/read", params).then(res => {\n      session.lastReadTime = new Date();\n      vue.$initialization.assembleLastMessage(session);\n      vue.$initialization.resortSessions(vue);\n      return res.data;\n    }, err => {\n      console.log(err.message);\n    });\n  },\n  cancelMsg: async function (params) {\n    $.ajax.SUCCESS = 0;\n    return await Sparrow.http.syncPost(SPARROW_BASE_URL + "/cancel", params).then(res => {\n      return res.data;\n    }, err => {\n      console.log(err.message);\n    });\n  },\n  login: function (code, mobile, password) {\n    const params = {\n      code: code,\n      mobile: mobile,\n      password: password,\n      areaCode: ""\n    };\n    return Sparrow.http.syncPost(CONSUMER_BASE_URL + "/app/authMember/loginByCode", params, 200);\n  },\n  getUserByPhone: function (mobile) {\n    const params = "mobile=" + mobile;\n    return Sparrow.http.syncGet(CONSUMER_BASE_URL + "/app/message/userDetail?" + params, 200);\n  },\n  getUserById: async function (id, vue) {\n    if (vue.$userMap != null && vue.$userMap[id] != null) {\n      return vue.$userMap[id];\n    }\n    const params = "id=" + id;\n    return await Sparrow.http.syncGet(CONSUMER_BASE_URL + "/app/message/findById?" + params, 200).then(function (res) {\n      vue.$userMap[res.data.userId] = res.data;\n      vue.$contact.users.push(res.data);\n      return res.data;\n    });\n  },\n  //初始化session时调用\n  getUserMapByIds: async function (idArr, localUserCache) {\n    //如果idArr为空，直接返回空对象\n    if (!Array.isArray(idArr) || idArr.length === 0) {\n      return {};\n    }\n    var userId = -1;\n    var i = 0;\n    try {\n      var userResultMap = {};\n      var needRemoteFetchIdArr = [];\n      //先从本地缓存中获取,并且将本地缓存中没有的id放入needRemoteFetchIdArr\n      for (i = 0; i < idArr.length; i++) {\n        userId = idArr[i];\n        if (localUserCache[userId] != null) {\n          userResultMap[userId] = localUserCache[userId];\n        } else {\n          needRemoteFetchIdArr.push(userId);\n        }\n      }\n      //needRemoteFetchIdArr = [7, 69];\n      //如果本地缓存中已经包含了所有的id，则直接返回\n      if (needRemoteFetchIdArr.length === 0) {\n        return userResultMap;\n      }\n      //如果本地缓存中没有，则从远程获取\n      const remoteUsers = await Sparrow.http.syncPost(CONSUMER_BASE_URL + "/app/message/userDetailList", needRemoteFetchIdArr, 200).then(function (res) {\n        return res.data;\n      }, function (error) {\n        return {\n          error\n        };\n      });\n      if (remoteUsers == null || remoteUsers.length === 0) {\n        return userResultMap;\n      }\n      for (i = 0; i < remoteUsers.length; i++) {\n        userId = remoteUsers[i].id;\n        var user = remoteUsers[i];\n        user.platform = !!user.isCustomer;\n        //将远程获取的用户信息放入本地缓存\n        localUserCache[userId] = remoteUsers[i];\n        //将远程获取的用户信息放入返回结果\n        userResultMap[userId] = remoteUsers[i];\n      }\n      return userResultMap;\n    } catch (e) {\n      console.error(e);\n      return {};\n    }\n  },\n  addFriendById: function (id) {\n    const params = "id=" + id;\n    return Sparrow.http.syncPost(CONSUMER_BASE_URL + "/app/message/addFriend", params, 200);\n  },\n  removeFriend: function (id) {\n    const params = "id=" + id;\n    return Sparrow.http.syncPost(CONSUMER_BASE_URL + "/app/message/removeFriend", params, 200);\n  },\n  newFriendList: function (id) {\n    const params = "id=" + id;\n    return Sparrow.http.syncGet(CONSUMER_BASE_URL + "/app/message/newFriend?" + params, 200);\n  },\n  auditFriend: function (id, status) {\n    const params = "id=" + id + "&status=" + status;\n    return Sparrow.http.syncPost(CONSUMER_BASE_URL + "/app/message/userFriendAudit", params, 200);\n  },\n  existGroup: function (id) {\n    const params = "groupId=" + id;\n    return Sparrow.http.syncPost(CONSUMER_BASE_URL + "/app/message/quitGroup", params, 200);\n  },\n  modifyGroup: function (id, name, avatar) {\n    const params = "groupId=" + id + "&name=" + name + "&avatar=" + avatar;\n    return Sparrow.http.syncPost(CONSUMER_BASE_URL + "/app/message/changeGroup", params, 200);\n  },\n  systemNotice: function () {\n    return Sparrow.http.syncGet(CONSUMER_BASE_URL + "/app/message/systemInform", 200);\n  },\n  platformServices: function () {\n    return Sparrow.http.syncGet(CONSUMER_BASE_URL + "/app/message/customList", 200);\n  }\n};\n\n\n//# sourceURL=webpack://Sparrow-PC-CHAT/../api/Chat.js?')}}]);