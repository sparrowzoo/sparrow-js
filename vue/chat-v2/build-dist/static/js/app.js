(self["webpackChunkSparrow_MOBILE_CHAT"]=self["webpackChunkSparrow_MOBILE_CHAT"]||[]).push([["app"],{"./src/App.vue":
/*!*********************!*\
  !*** ./src/App.vue ***!
  \*********************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=template&id=7ba5bd90& */ "./src/App.vue?vue&type=template&id=7ba5bd90&");\n/* harmony import */ var _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./App.vue?vue&type=script&lang=js& */ "./src/App.vue?vue&type=script&lang=js&");\n/* harmony import */ var _App_vue_vue_type_style_index_0_id_7ba5bd90_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css& */ "./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css&");\n/* harmony import */ var _node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js */ "./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js");\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(\n  _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],\n  _App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__.render,\n  _App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = "src/App.vue"\n/* harmony default export */ __webpack_exports__["default"] = (component.exports);\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/./src/App.vue?')},"./src/App.vue?vue&type=script&lang=js&":
/*!**********************************************!*\
  !*** ./src/App.vue?vue&type=script&lang=js& ***!
  \**********************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_40_use_0_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=script&lang=js&");\n /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_clonedRuleSet_40_use_0_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); \n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/./src/App.vue?')},"./src/App.vue?vue&type=template&id=7ba5bd90&":
/*!****************************************************!*\
  !*** ./src/App.vue?vue&type=template&id=7ba5bd90& ***!
  \****************************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "render": function() { return /* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_40_use_0_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_loaders_templateLoader_js_ruleSet_1_rules_3_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__.render; },\n/* harmony export */   "staticRenderFns": function() { return /* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_40_use_0_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_loaders_templateLoader_js_ruleSet_1_rules_3_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns; }\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_40_use_0_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_loaders_templateLoader_js_ruleSet_1_rules_3_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=template&id=7ba5bd90& */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=template&id=7ba5bd90&");\n\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/./src/App.vue?')},"./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css&":
/*!******************************************************************!*\
  !*** ./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css& ***!
  \******************************************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_style_loader_index_js_clonedRuleSet_12_use_0_node_modules_css_loader_dist_cjs_js_clonedRuleSet_12_use_1_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_12_use_2_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_7ba5bd90_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/vue-style-loader/index.js??clonedRuleSet-12.use[0]!../node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css& */ "./node_modules/vue-style-loader/index.js??clonedRuleSet-12.use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css&");\n/* harmony import */ var _node_modules_vue_style_loader_index_js_clonedRuleSet_12_use_0_node_modules_css_loader_dist_cjs_js_clonedRuleSet_12_use_1_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_12_use_2_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_7ba5bd90_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_clonedRuleSet_12_use_0_node_modules_css_loader_dist_cjs_js_clonedRuleSet_12_use_1_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_12_use_2_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_7ba5bd90_lang_css___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_clonedRuleSet_12_use_0_node_modules_css_loader_dist_cjs_js_clonedRuleSet_12_use_1_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_12_use_2_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_7ba5bd90_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _node_modules_vue_style_loader_index_js_clonedRuleSet_12_use_0_node_modules_css_loader_dist_cjs_js_clonedRuleSet_12_use_1_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_12_use_2_node_modules_vue_cli_service_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_7ba5bd90_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/./src/App.vue?')},"../../source/scripts/ImProtocol.js":
/*!******************************************!*\
  !*** ../../source/scripts/ImProtocol.js ***!
  \******************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ImProtocol": function() { return /* binding */ ImProtocol; }\n/* harmony export */ });\n/* harmony import */ var core_js_modules_esnext_typed_array_to_reversed_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/esnext.typed-array.to-reversed.js */ "./node_modules/core-js/modules/esnext.typed-array.to-reversed.js");\n/* harmony import */ var core_js_modules_esnext_typed_array_to_reversed_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_typed_array_to_reversed_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_esnext_typed_array_to_sorted_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/esnext.typed-array.to-sorted.js */ "./node_modules/core-js/modules/esnext.typed-array.to-sorted.js");\n/* harmony import */ var core_js_modules_esnext_typed_array_to_sorted_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_typed_array_to_sorted_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_esnext_typed_array_with_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/esnext.typed-array.with.js */ "./node_modules/core-js/modules/esnext.typed-array.with.js");\n/* harmony import */ var core_js_modules_esnext_typed_array_with_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_typed_array_with_js__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n//im 封装的底层通信协议 保证对前台的协议是一致的\nvar ImProtocol = function (\n//聊天类型 0:1对1单聊 1:一对多群聊\nchatType,\n//消息类型 0:文本消息 1:图片消息\nmsgType,\n//当前用户id [当前用户ID可以不传]\nsender,\n//接收方ID\nreceiver,\n// 会话key,如果是1对一会话，可以不传\nsessionKey,\n//消息内容\nmsg,\n//客户端发送时间\nclientSendTime) {\n  this.chatType = chatType;\n  this.msgType = msgType;\n  this.sender = sender;\n  this.receiver = receiver;\n  this.sessionKey = sessionKey;\n  this.msg = msg;\n  this.clientSendTime = clientSendTime;\n};\n\n//文件消息标识\nImProtocol.TEXT_MESSAGE = 0;\n//图片消息标识\nImProtocol.IMAGE_MESSAGE = 1;\n//1对1单聊\nImProtocol.CHAT_TYPE_1_2_1 = 0;\n//一对多群聊\nImProtocol.CHAT_TYPE_1_2_N = 1;\n//撤消消息\nImProtocol.CHAT_TYPE_CANCEL = 2;\nImProtocol.CHAT_TYPE_LENGTH = 1;\nImProtocol.MSG_TYPE_LENGTH = 1;\nImProtocol.prototype.toBytes = function () {\n  var currentUserId = parseInt(this.sender, 10);\n  var currentUserIdBytes = currentUserId.toBytes();\n  var currentUserIdLength = currentUserIdBytes.length;\n  var sessionKeyBytes = null;\n  var sessionKeyBytesLength = null;\n  var sessionKeyLengthBytes = null;\n  var sessionKeyLengthLength = 4; //int 4bytes\n\n  var receiverBytes = null;\n  var receiverLength = 4; //int 4bytes\n  if (this.chatType === ImProtocol.CHAT_TYPE_1_2_N) {\n    sessionKeyBytes = this.sessionKey.toArrayBuffer();\n    //session key 字节的长度\n    sessionKeyBytesLength = sessionKeyBytes.length;\n    //session key length\'s bytes\n    sessionKeyLengthBytes = sessionKeyBytesLength.toBytes();\n    //session key length\'s bytes length\n    sessionKeyLengthLength = 4; //int 4bytes\n  } else {\n    receiverBytes = this.receiver.toBytes();\n  }\n  var contentBytes = this.msgType === ImProtocol.TEXT_MESSAGE ? this.msg.toArrayBuffer() : this.msg;\n  var msgLength = this.msgType === ImProtocol.TEXT_MESSAGE ? contentBytes.length : this.msg.byteLength;\n  var msgLengthBytes = msgLength.toBytes();\n  var msgLengthLength = 4; //int 4bytes\n  var sendTimeBytes = (this.clientSendTime + "").toArrayBuffer();\n  var sendTimeLength = sendTimeBytes.length;\n  var totalLength = 0;\n  if (this.chatType === ImProtocol.CHAT_TYPE_1_2_N) {\n    totalLength = ImProtocol.CHAT_TYPE_LENGTH + ImProtocol.MSG_TYPE_LENGTH + currentUserIdLength +\n    //4\n    sessionKeyLengthLength +\n    //4\n    sessionKeyBytesLength + msgLengthLength +\n    //4\n    msgLength + sendTimeLength;\n  } else {\n    totalLength = ImProtocol.CHAT_TYPE_LENGTH + ImProtocol.MSG_TYPE_LENGTH + currentUserIdLength +\n    //4\n    receiverLength +\n    //4\n    msgLengthLength +\n    //4\n    msgLength + sendTimeLength;\n  }\n  let result = new Uint8Array(totalLength);\n  var offset = 0;\n  result.set([this.chatType, this.msgType], offset);\n  offset += ImProtocol.CHAT_TYPE_LENGTH + ImProtocol.MSG_TYPE_LENGTH;\n  result.set(currentUserIdBytes, offset);\n  offset += currentUserIdLength;\n  if (this.chatType === ImProtocol.CHAT_TYPE_1_2_N) {\n    result.set(sessionKeyLengthBytes, offset);\n    offset += sessionKeyLengthLength;\n    result.set(sessionKeyBytes, offset);\n    offset += sessionKeyBytesLength;\n  } else {\n    result.set(receiverBytes, offset);\n    offset += receiverLength;\n  }\n  result.set(msgLengthBytes, offset);\n  offset += msgLengthLength;\n  result.set(contentBytes, offset);\n  offset += msgLength;\n  result.set(sendTimeBytes, offset);\n  return result;\n};\nImProtocol.cancel = function (dataView, buf, callback) {\n  var offset = 0;\n  var chatType = dataView.getUint8(offset);\n  console.log("撤销协议");\n  offset += 1;\n  const sessionKeyLength = dataView.getInt32(offset);\n  offset += 4; //session key length=4\n  const sessionKeyBuffer = buf.slice(offset, sessionKeyLength + offset);\n  offset += sessionKeyLength;\n  const sessionKey = new Uint8Array(sessionKeyBuffer).toString();\n  const clientSendTimeLength = dataView.getInt32(offset);\n  offset += 4; //session key length=4\n  const clientSendTimeBuffer = buf.slice(offset, clientSendTimeLength + offset);\n  const clientSendTime = +new Uint8Array(clientSendTimeBuffer).toString();\n  console.log(sessionKeyLength, sessionKey, clientSendTime);\n  callback({\n    chatType: chatType,\n    clientSendTime: clientSendTime,\n    sessionKey: sessionKey\n  });\n};\n//收到推送的消息\nImProtocol.parse = async function (blob, callback) {\n  //当客户端收到服务端发来的消息时，触发onmessage事件，\n  // 参数e.data包含server传递过来的数据\n  const buf = await blob.arrayBuffer();\n  var offset = 0;\n  var dataView = new DataView(buf);\n  var chatType = dataView.getUint8(offset);\n  // 服务器撤消事件推送\n  if (chatType === 2) {\n    ImProtocol.cancel(dataView, buf, callback);\n    return;\n  }\n  var receiver = null;\n  var sessionKey = null;\n  var text = null;\n  var msgBuffer = null;\n  var sender = null;\n  var clientSendTime = null;\n  var serverTime = null;\n\n  //正常接收消息推送\n  offset += ImProtocol.CHAT_TYPE_LENGTH; //chat type length=1\n  var msgType = dataView.getUint8(offset);\n  offset += ImProtocol.MSG_TYPE_LENGTH; //msg type length=1\n  //消息来源 对方用户id\n  //因为是接收消息，所以fromUserId就是对方用户id\n  sender = dataView.getInt32(offset);\n  offset += 4; //from user id length=4\n  if (chatType === ImProtocol.CHAT_TYPE_1_2_1) {\n    //因为是接收消息，所以currentUserId是接收人ID，即当前用户ID\n    receiver = dataView.getInt32(offset);\n    sessionKey = ImProtocol.generate121SessionKey(sender, receiver);\n    offset += 4;\n  }\n  if (chatType === ImProtocol.CHAT_TYPE_1_2_N) {\n    //群聊获取session key\n    var sessionKeyLength = dataView.getInt32(offset);\n    offset += 4; //session key length=4\n    const sessionKeyBuffer = buf.slice(offset, sessionKeyLength + offset);\n    offset += sessionKeyLength;\n    //构建session key\n    sessionKey = new Uint8Array(sessionKeyBuffer).toString();\n  }\n\n  //实际的消息长度\n  var msgLength = dataView.getInt32(offset);\n  offset += 4; //msg length =4\n\n  //文本消息解析\n  if (msgType === ImProtocol.TEXT_MESSAGE) {\n    const msgBuffer = buf.slice(offset, offset + msgLength);\n    const chars = new Uint8Array(msgBuffer);\n    text = chars.toString();\n    //console.log(this.msg);\n  } else {\n    //图片消息解析\n    //const img = document.getElementById(\'img\');\n    msgBuffer = buf.slice(offset, offset + msgLength);\n  }\n  offset += msgLength;\n  //客户端发送时间【对方传过来】\n  var clientTimeServiceTimePair = new Uint8Array(buf.slice(offset, buf.byteLength)).toString();\n  console.log("im protocol ", JSON.stringify(clientTimeServiceTimePair));\n  var clientServiceTimeArray = clientTimeServiceTimePair.split("_");\n  clientSendTime = parseInt(clientServiceTimeArray[0], 10);\n  serverTime = parseInt(clientServiceTimeArray[1], 10);\n  callback({\n    chatType: chatType,\n    msgType: msgType,\n    sender: sender,\n    receiver: receiver,\n    msg: msgType === ImProtocol.TEXT_MESSAGE ? text : msgBuffer,\n    clientSendTime: clientSendTime,\n    serverTime: serverTime,\n    sessionKey: sessionKey\n  });\n};\nImProtocol.getOppositeUser = function (sessionKey, currentUserId) {\n  if (Sparrow.isNullOrEmpty(sessionKey)) {\n    return -1;\n  }\n  var sessionArray = sessionKey.split("_");\n  if (sessionArray.length < 2) {\n    return -1;\n  }\n  var userId1 = parseInt(sessionArray[0], 10);\n  var userId2 = parseInt(sessionArray[1], 10);\n  if (userId1 === currentUserId) {\n    return userId2;\n  }\n  return userId1;\n};\nImProtocol.generate121SessionKey = function (userId, userId2) {\n  if (userId < userId2) {\n    return userId + "_" + userId2;\n  }\n  return userId2 + "_" + userId;\n};\n\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/../../source/scripts/ImProtocol.js?')},"../../source/scripts/sparrow_es.js":
/*!******************************************!*\
  !*** ../../source/scripts/sparrow_es.js ***!
  \******************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Sparrow": function() { return /* binding */ Sparrow; }\n/* harmony export */ });\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ "./node_modules/core-js/modules/es.array.push.js");\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_esnext_typed_array_to_reversed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/esnext.typed-array.to-reversed.js */ "./node_modules/core-js/modules/esnext.typed-array.to-reversed.js");\n/* harmony import */ var core_js_modules_esnext_typed_array_to_reversed_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_typed_array_to_reversed_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_esnext_typed_array_to_sorted_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/esnext.typed-array.to-sorted.js */ "./node_modules/core-js/modules/esnext.typed-array.to-sorted.js");\n/* harmony import */ var core_js_modules_esnext_typed_array_to_sorted_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_typed_array_to_sorted_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_esnext_typed_array_with_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/esnext.typed-array.with.js */ "./node_modules/core-js/modules/esnext.typed-array.with.js");\n/* harmony import */ var core_js_modules_esnext_typed_array_with_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_typed_array_with_js__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nString.prototype.trim = function () {\n  return this.replace(/(^\\s*)|(\\s*$)/g, "");\n};\nString.prototype.ltrim = function () {\n  return this.replace(/(^\\s*)/g, "");\n};\nString.prototype.rtrim = function () {\n  return this.replace(/(\\s*$)/g, "");\n};\n// 如果为""或者是\'\'则返回为null 所以在调用之前要做了null判断\nString.prototype.json = function () {\n  if (this === "" || this === "\'\'" || this.length === 0) {\n    return null;\n  }\n  if (this.indexOf("error|") !== -1) {\n    console.log(this);\n  }\n  try {\n    var json = this;\n    json = json.decodeSplitKey();\n    return eval("(" + json.replace(/\\r\\n/g, "<br/>").replace(/\\n/g, "<br/>") + ")");\n  } catch (err) {\n    return console.log(err);\n  }\n};\nString.prototype.firstCharToAscii = function () {\n  return this.charCodeAt(0);\n};\nString.prototype.leftAlignWithChar = function (c, length) {\n  length = length ? length : 3;\n  c = c ? c : "0";\n  if (this.length >= length) {\n    return;\n  }\n  var charArray = [];\n  var charCount = length - this.length;\n  for (var i = 0; i < charCount; i++) {\n    charArray.push(c);\n  }\n  return charArray.join("") + this;\n};\nString.prototype.getCountByChar = function (c) {\n  return this.split(c).length - 1;\n};\nString.prototype.getByteLength = function () {\n  return this.replace(/[^\\x00-\\xff]/g, "**").length;\n};\nString.prototype.subString = function (len, hasDot) {\n  var newLength = 0;\n  var newStr = "";\n  var chineseRegex = /[^\\x00-\\xff]/g;\n  var singleChar = "";\n  var strLength = this.replace(chineseRegex, "**").length;\n  var i;\n  for (i = 0; i < strLength; i += 1) {\n    singleChar = this.charAt(i).toString();\n    if (singleChar.match(chineseRegex)) {\n      newLength += 2;\n    } else {\n      newLength += 1;\n    }\n    if (newLength > len) {\n      break;\n    }\n    newStr += singleChar;\n  }\n  if (hasDot && strLength > len) {\n    newStr += "..";\n  }\n  return newStr;\n};\n/*\n * String.prototype.encodeSplitKey = function() { var str = this; str =\n * str.replace(/#/g, "#limit"); str = str.replace(/:/g, "#colon#"); str =\n * str.replace(/,/g, "#dot#"); str = str.replace(/"/g, "#ref#"); return str; };\n */\nString.prototype.decodeSplitKey = function () {\n  var str = this;\n  str = str.replace(/#colon#/g, ":");\n  str = str.replace(/#dot#/g, ",");\n  str = str.replace(/#ref#/g, \'\\\\"\');\n  str = str.replace(/#limit/g, "#");\n  return str;\n};\nString.prototype.decodeHtml = function () {\n  var html = this;\n  html = html.replace(/&amp;/g, "&");\n  html = html.replace(/&lt;/g, "<");\n  html = html.replace(/&gt;/g, ">");\n  html = html.replace(/&quot;/g, \'"\');\n  html = html.replace(/&nbsp;/g, " ");\n  return html;\n};\n// 字符格式化方法\nString.prototype.format = function () {\n  var newStr = this;\n  if (arguments.length >= 1 && typeof arguments[0] === "object") {\n    var re = /#{(.*?)}/gi;\n    var r = null;\n    while (r = re.exec(this)) {\n      var placeHolder = r[0];\n      var property = r[1];\n      var value = arguments[0].value(property);\n      if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n          value = arguments[i].value(property);\n          if (value) {\n            break;\n          }\n        }\n      }\n      newStr = newStr.replace(placeHolder, $.isNullOrEmpty(value) ? "-" : value);\n    }\n    return newStr;\n  }\n  var reg = null;\n  for (var i = 0; i < arguments.length; i++) {\n    reg = new RegExp("\\\\{" + i + "\\\\}", "gm");\n    newStr = newStr.replace(reg, $.isNullOrEmpty(arguments[i]) ? "-" : arguments[i]);\n  }\n  return newStr;\n};\n// 过滤闭合的html标签\nString.prototype.filterHTML = function () {\n  var newString = this;\n  while (newString.search(/<([a-z0-9]*?).*?>([\\s\\S]*?)<\\/\\1>/gi) > -1) {\n    newString = newString.replace(/<([a-z0-9]*?).*?>([\\s\\S]*?)<\\/\\1>/gi, "$2");\n  }\n  if (newString.search(/<input.*>/)) {\n    newString = newString.replace(/<input.*>/gi, "");\n  }\n  if (newString.search(/<(script).*?>.*?<\\/\\1>/)) {\n    newString = newString.replace(/<(script).*?>.*?<\\/\\1>/gi, "");\n  }\n  if (newString.search(/<script.*>/)) {\n    newString = newString.replace(/<script.*>/gi, "");\n  }\n  return newString;\n};\nString.prototype.firstCharUpperCase = function () {\n  return this.substr(0, 1).toUpperCase() + this.substr(1);\n};\nString.prototype.join = function (str) {\n  if (!$.isNullOrEmpty(str)) {\n    return this + str;\n  }\n  return this + "";\n};\nString.prototype.toArrayBuffer = function () {\n  var bytes = [];\n  var len, c;\n  len = this.length;\n  for (var i = 0; i < len; i++) {\n    c = this.charCodeAt(i);\n    if (c >= 0x010000 && c <= 0x10ffff) {\n      bytes.push(c >> 18 & 0x07 | 0xf0);\n      bytes.push(c >> 12 & 0x3f | 0x80);\n      bytes.push(c >> 6 & 0x3f | 0x80);\n      bytes.push(c & 0x3f | 0x80);\n    } else if (c >= 0x000800 && c <= 0x00ffff) {\n      bytes.push(c >> 12 & 0x0f | 0xe0);\n      bytes.push(c >> 6 & 0x3f | 0x80);\n      bytes.push(c & 0x3f | 0x80);\n    } else if (c >= 0x000080 && c <= 0x0007ff) {\n      bytes.push(c >> 6 & 0x1f | 0xc0);\n      bytes.push(c & 0x3f | 0x80);\n    } else {\n      bytes.push(c & 0xff);\n    }\n  }\n  var array = new Int8Array(bytes.length);\n  for (var i in bytes) {\n    array[i] = bytes[i];\n  }\n  return array;\n};\nArray.prototype.clear = function () {\n  for (var i = 0; i < this.length; i += 1) {\n    this.pop();\n  }\n};\nArray.prototype.indexOf = function (val) {\n  for (var i = 0; i < this.length; i++) {\n    if (this[i] === val) {\n      return i;\n    }\n  }\n  return -1;\n};\nArray.prototype.remove = function (val) {\n  var index = this.indexOf(val);\n  if (index > -1) {\n    this.splice(index, 1);\n  }\n};\nArray.prototype.toUint8Array = function () {\n  var bytes = this;\n  var array = new Uint8Array(bytes.length);\n  for (var i = 0; i < array.length; i++) {\n    array[i] = bytes[i];\n  }\n  return array;\n};\n// If Push and pop is not implemented by the browser\nif (!Array.prototype.push) {\n  Array.prototype.push = function array_push() {\n    for (var i = 0; i < arguments.length; i++) this[this.length] = arguments[i];\n    return this.length;\n  };\n}\nif (!Array.prototype.pop) {\n  Array.prototype.pop = function array_pop() {\n    lastElement = this[this.length - 1];\n    this.length = Math.max(this.length - 1, 0);\n    return lastElement;\n  };\n}\nUint8Array.prototype.toString = function () {\n  /**\n   * https://www.javascripture.com/DataView\n   * DataViews allow heterogeneous access to data stored in an ArrayBuffer. Values can be read and stored at any byte offset without alignment constraints.\n   * @type {DataView}\n   */\n  var dataView = new DataView(this.buffer);\n  var ints = new Uint8Array(this.buffer.byteLength);\n  for (var i = 0; i < ints.length; i++) {\n    ints[i] = dataView.getUint8(i);\n  }\n  var str = "",\n    _arr = ints;\n  for (var i = 0; i < _arr.length; i++) {\n    var one = _arr[i].toString(2),\n      v = one.match(/^1+?(?=0)/);\n    if (v && one.length === 8) {\n      var bytesLength = v[0].length;\n      var store = _arr[i].toString(2).slice(7 - bytesLength);\n      for (var st = 1; st < bytesLength; st++) {\n        store += _arr[st + i].toString(2).slice(2);\n      }\n      str += String.fromCharCode(parseInt(store, 2));\n      i += bytesLength - 1;\n    } else {\n      str += String.fromCharCode(_arr[i]);\n    }\n  }\n  return str;\n};\n//小端模式\n//number 要转换的整形数值\n//length 要转成什么byte数组，规定数组的长度\n//如uint16，则length=2表示两个字节，转成的byte数组长度是length=2\n//如uint32，则length=2表示两个字节，转成的byte数组长度是length=4\nNumber.prototype.toBytes = function () {\n  length = 4;\n  //只支持32位以下数字，32位以上会有精度问题\n  var number = this;\n  var bytes = [];\n  var i = length;\n  do {\n    //console.log(number.toString(2));\n    bytes[--i] = number & 255;\n    number = number >> 8;\n  } while (i);\n  return bytes;\n};\n// new Date().format("yyyy-MM-dd hh:mm:ss");\nDate.prototype.format = function (fmt) {\n  var o = {\n    "M+": this.getMonth() + 1,\n    //月份\n    "d+": this.getDate(),\n    //日\n    "h+": this.getHours(),\n    //小时\n    "m+": this.getMinutes(),\n    //分\n    "s+": this.getSeconds(),\n    //秒\n    "q+": Math.floor((this.getMonth() + 3) / 3),\n    //季度\n    S: this.getMilliseconds() //毫秒\n  };\n\n  if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));\n  for (var k in o) if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));\n  return fmt;\n};\n\n/**\n * @return\n *\n * # id  id\n * & name address equal name\n * ^ tag tag name\n * ! son dot below\n * $ for ---for 4\n * * checked_value * equal multi\n * + new create\n * ...\n */\nvar Sparrow = function (selector, parent, doc, cache, sparrowContainerKey) {\n  if (window === this || !(this instanceof Sparrow)) {\n    //Array.prototype.slice 将arguments 转化成数组\n    var args = Array.prototype.slice.call(arguments, 0);\n    if (!selector) {\n      return null;\n    }\n    //execute method and return result for constant\n    /**\n     * root_domain: $(function () {\n        return window.location.host.substr(window.location.host.indexOf(\'.\'));\n    })\n     */\n    if (typeof selector === "function") {\n      //call不为数组\n      //apply 的参数为数组\n      //Array.prototype.slice 将arguments 转化成数组\n      return selector.apply(selector, args.slice(1));\n    }\n    if (args[0] === "jsonp") {\n      var script = document.createElement("script");\n      script.type = "text/javascript";\n      script.language = "javascript";\n      script.src = args[1];\n      script.id = args[2];\n      var oldScript = document.getElementById(script.id);\n      if (oldScript != null) {\n        document.head.removeChild(oldScript);\n      }\n      document.head.appendChild(script);\n      return null;\n    }\n    sparrowContainerKey = selector;\n    if (typeof selector === "object") {\n      sparrowContainerKey = "#" + selector.id;\n    }\n    parent = null;\n    doc = document;\n    cache = true;\n    //selector, parent, doc, cache, sparrowContainerKey\n    if (args.length >= 2) {\n      //selector,cache\n      if (typeof args[1] == "boolean") {\n        cache = args[1];\n      } else {\n        //selector,parent\n        parent = args[1];\n      }\n      if (args.length >= 3) {\n        //selector,parent,cache\n        if (typeof args[2] == "boolean") {\n          cache = args[2];\n        } else {\n          //select,parent doc\n          doc = args[2];\n        }\n      }\n      //selector,parent,doc,cache\n      if (args.length === 4) {\n        cache = args[3];\n      }\n    }\n    if (parent != null && typeof parent === "object") {\n      if (!parent.id) {\n        parent.id = "sparrow_" + $.random();\n      }\n      sparrowContainerKey += "_" + parent.id;\n    }\n    if ($.global(sparrowContainerKey)) {\n      return $.global(sparrowContainerKey);\n    }\n    var beginSelector = ["#", "!", "$", "&", "*", "+", "^"];\n    //$("btnButtonId") .... equal document.getElementById("btnButtonId");\n    if (typeof selector !== "object" && beginSelector.indexOf(selector.substring(0, 1)) == -1) {\n      //btnButtonId\n      return doc.getElementById(selector);\n    }\n    return new Sparrow(selector, parent, doc, cache, sparrowContainerKey);\n  }\n  var elements = [];\n  this.selector = selector;\n  this.doc = doc;\n  if (typeof selector === "object") {\n    elements[0] = selector;\n    if (!selector.id) {\n      selector.id = "sparrow_" + $.random();\n    }\n    this.selector = "#" + selector.id;\n    sparrowContainerKey = this.selector;\n  } else if (typeof selector === \'string\') {\n    //["#", "!", "$", "&", "*", "+", "^"]\n    var switch_char = selector.substring(0, 1);\n    selector = selector.substring(1);\n    var selectorArray = selector.split(".");\n    var i = 0;\n    switch (switch_char) {\n      case "#":\n        //id\n        elements[0] = doc.getElementById(selector);\n        break;\n      case "^":\n        //tag\n        elements = doc.getElementsByTagName(selector);\n        break;\n      case "&":\n        //name\n        elements = doc.getElementsByName(selector);\n        break;\n      case "+":\n        //+html-label.id.parentId.type\n        elements[0] = doc.createElement(selectorArray[0]);\n        if (selectorArray.length >= 2) {\n          elements[0].id = selectorArray[1];\n        } else {\n          elements[0].id = "sparrow_" + $.random();\n        }\n        this.selector = "#" + selectorArray[1];\n        sparrowContainerKey = this.selector;\n        if (selectorArray.length >= 3) {\n          if (selectorArray[2] === "doc") {\n            this.doc.body.appendChild(elements[0]);\n          } else {\n            this.doc.getElementById(selectorArray[2]).appendChild(elements[0]);\n          }\n        }\n        if (selectorArray.length >= 4) {\n          elements[0].type = selectorArray[3];\n        }\n        break;\n      case "!":\n        //!html-label.parentId"\n        var childs = [];\n        if (!parent) {\n          parent = $(selectorArray[1]);\n        }\n        var children = parent.getElementsByTagName(selectorArray[0]);\n        if (selectorArray[0] === "li") {\n          parent = children[0].parentNode;\n        }\n        this.s = parent;\n        if (!parent.id) {\n          parent.id = "sparrow_" + $.random();\n        }\n        for (i = 0; i < children.length; i++) {\n          if (children[i].parentNode === parent) {\n            childs[childs.length] = children[i];\n          }\n        }\n        elements = childs;\n        break;\n      case "$":\n        //for 4\n        var labelList = doc.getElementsByTagName("label");\n        for (i = 0; i < labelList.length; i++) {\n          if (labelList[i].attributes["for"].value === selector) {\n            elements[0] = labelList[i];\n            break;\n          }\n        }\n        break;\n      case "*":\n        var selectedTag = [];\n        var tagArray = doc.getElementsByName(selectorArray[0]);\n        var attribute = null;\n        if (selectorArray.length > 1) {\n          attribute = selectorArray[1];\n        }\n        // 获取当前已经选中的标签\n        for (i = 0; i < tagArray.length; i++) {\n          if (tagArray[i].checked) {\n            if (attribute) {\n              selectedTag[selectedTag.length] = tagArray[i].attributes[attribute].value;\n            } else {\n              selectedTag[selectedTag.length] = tagArray[i].value;\n            }\n          }\n        }\n        elements = selectedTag;\n        break;\n    }\n  }\n  if (selector) {\n    this.length = 0;\n    if (elements.length > 0) {\n      if (!this.s) {\n        this.s = elements[0];\n      }\n      if (this.s && this.s.id && cache) {\n        $.global(sparrowContainerKey, this);\n      }\n    }\n    [].push.apply(this, elements);\n  }\n  this.interval = [];\n  return this;\n};\nwindow.$ = window.Sparrow = Sparrow;\nSparrow.browser = {\n  url: {\n    manage: "default.jsp",\n    logout_url: "/user/logout.json"\n  },\n  cookie: {\n    permission: "permission",\n    call_back_url: "call_back_url",\n    website_name: "website_name",\n    themes: "sparrow.themes",\n    // 配置cookie的域并非cookie的key\n    root_domain: $(function () {\n      return window.location.host.substr(window.location.host.indexOf(\'.\') + 1);\n    }),\n    domain: window.location.host\n  },\n  ie: $(function () {\n    return navigator.userAgent.search(/MSIE/img) !== -1;\n  }),\n  opera: $(function () {\n    return navigator.userAgent.search(/Opera/img) !== -1;\n  }),\n  firefox: $(function () {\n    return navigator.userAgent.search(/Firefox/img) !== -1;\n  }),\n  google: $(function () {\n    return navigator.userAgent.search(/Chrome/img) !== -1;\n  }),\n  version: $(function () {\n    if (navigator.userAgent.search(/MSIE/img) !== -1) {\n      navigator.userAgent.match(/MSIE\\b\\s*([0-9\\.0-9]+);/img);\n      return RegExp.$1;\n    } else if (navigator.userAgent.search(/Opera/img) !== -1) {\n      navigator.userAgent.match(/Version\\/([0-9\\.]+)/img);\n      return RegExp.$1;\n    } else if (navigator.userAgent.search(/Firefox/img) !== -1) {\n      navigator.userAgent.match(/Firefox\\/([0-9\\.]+)/img);\n      return RegExp.$1;\n    } else if (navigator.userAgent.search(/Chrome/img) !== -1) {\n      navigator.userAgent.search(/Chrome\\/([0-9\\.]+)/img);\n      return RegExp.$1;\n    }\n  }),\n  addFavorite: function (url, title) {\n    if (document.all) {\n      window.external.AddFavorite(url, title);\n    } else if (window.sidebar) {\n      window.sidebar.addPanel(title, url, "");\n    } else {\n      alert("对不起，您的浏览器不支持此操作!\\n请您使用菜单栏或Ctrl+D收藏本站。");\n    }\n  },\n  setHome: function (anchorLabel, url) {\n    try {\n      anchorLabel.style.behavior = \'url(#default#homepage)\';\n      anchorLabel.setHomePage(url);\n    } catch (e) {\n      if (window.netscape) {\n        try {\n          netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");\n          var prefs = Components.classes[\'@mozilla.org/preferences-service;1\'].getService(Components.interfaces.nsIPrefBranch);\n          prefs.setCharPref(\'browser.startup.homepage\', url);\n        } catch (e) {\n          alert(\'抱歉！您的浏览器不支持直接设为首页。请在浏览器地址栏输入“about:config”并回车然后将[signed.applets.codebase_principal_support]设置为“true”，点击“加入收藏”后忽略安全提示，即可设置成功。\');\n        }\n      }\n    }\n  },\n  copy: function (text, msg) {\n    if (!msg) {\n      msg = "成功复制！可以通过ctrl+v进行粘贴操作！";\n    }\n    try {\n      if (window.clipboardData) {\n        window.clipboardData.setData("Text", text);\n        alert(msg);\n        return;\n      }\n      try {\n        netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");\n      } catch (e) {\n        alert("您的浏览器设置为不允许复制！\\n如果需要此操作，请在浏览器地址栏输入\'about:config\'并回车\\n然后将\'signed.applets.codebase_principal_support\'设置为\'true\',再重试复制操作!");\n        return false;\n      }\n      var clip = Components.classes[\'@mozilla.org/widget/clipboard;1\'].createInstance(Components.interfaces.nsIClipboard);\n      if (!clip) return;\n      var trans = Components.classes[\'@mozilla.org/widget/transferable;1\'].createInstance(Components.interfaces.nsITransferable);\n      if (!trans) {\n        return;\n      }\n      trans.addDataFlavor(\'text/unicode\');\n      var supportsString = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);\n      supportsString.data = text;\n      trans.setTransferData("text/unicode", supportsString, text.getByteLength());\n      var clipid = Components.interfaces.nsIClipboard;\n      if (!clip) return false;\n      clip.setData(trans, null, clipid.kGlobalClipboard);\n      alert(msg);\n    } catch (e) {\n      alert("对不起！您的浏览器不支持该功能");\n    }\n  },\n  setCookie: function (cookieName, cookieValue, expireseconds, domain, path, secure) {\n    var expires = null;\n    if (expireseconds !== 0 && expireseconds) {\n      expires = new Date();\n      expires.setTime(expires.getTime() + expireseconds * 1000);\n    }\n    document.cookie = encodeURIComponent(cookieName) + \'=\' + encodeURIComponent(cookieValue) + (expires ? \'; expires=\' + expires.toGMTString() : \'\') + \'; path=\' + (path ? path : \'/\') + \'; domain=\' + (domain ? domain : this.cookie.root_domain) + (secure ? \'; secure\' : \'\');\n  },\n  getCookie: function (cookieName) {\n    var cookieValue = null;\n    var posName = document.cookie.indexOf(escape(cookieName) + \'=\');\n    if (posName !== -1) {\n      var posValue = posName + (escape(cookieName) + \'=\').length;\n      var endPos = document.cookie.indexOf(\';\', posValue);\n      if (endPos !== -1) cookieValue = decodeURIComponent(document.cookie.substring(posValue, endPos));else cookieValue = decodeURIComponent(document.cookie.substring(posValue));\n    }\n    if (cookieValue == null || typeof cookieValue === "undefined" || cookieValue === "undefined") {\n      return null;\n    }\n    return cookieValue;\n  },\n  // 根据按下控件的对象获取要执行的按钮事件\n  // auguments=window.dialogArguments子页获取参数\n  showModalDialog: function (width, height, url, callback, args) {\n    var result;\n    url = $.randomUrl(url);\n    if ($.browser.ie) {\n      result = window.showModalDialog(url, args, "dialogHeight:{0}px; dialogWidth:{1}px; status:no; help:no; scroll:auto".format(height, width));\n    } else {\n      result = window.open(url, args, "height={0}, width={1},toolbar= no, menubar=no, scrollbars=auto, resizable=no, location=no, status=no,top=100,left=300".format(height, width));\n    }\n    if (result) {\n      callback(result);\n    }\n  },\n  /*{url:\'\',height:1px;width:1px,target:\'_blank\'}*/\n  window: function (config) {\n    var url = $.randomUrl(config.url);\n    if (!config.win) {\n      config.win = window;\n    }\n    var target = config.target ? config.target : "_blank";\n    var parameters = null;\n    if ($.isNullOrEmpty(config.width)) {\n      parameters = "height={0}px,width={1}px,toolbar= no, menubar=no, scrollbars=auto, resizable=no, location=no, status=no,top=100,left=300".format(config.height, config.width);\n    }\n    config.win.open(url, target, parameters);\n  },\n  close: function () {\n    window.opener = null;\n    window.open(\'about:blank\', \'_self\');\n    window.close();\n  },\n  getUrlWithoutParameter: function (url) {\n    var currentLocation = url ? url : window.location.href;\n    var locationIndex = currentLocation.indexOf(\'?\');\n    if (locationIndex < 0) {\n      locationIndex = currentLocation.indexOf("#");\n    }\n    if (locationIndex > -1) {\n      currentLocation = currentLocation.substring(0, locationIndex);\n    }\n    return currentLocation;\n  },\n  getUserId: function () {\n    var permission = $.browser.getCookie(this.cookie.permission);\n    if (permission == null) {\n      return 0;\n    }\n    return permission.split(\'&\')[0].substring("id=".length);\n  },\n  getUserName: function () {\n    var permission = $.browser.getCookie(this.cookie.permission);\n    if (permission == null) {\n      return null;\n    }\n    return permission.split(\'&\')[1].substring("name=".length);\n  },\n  isLogin: function () {\n    var userId = $.browser.getUserId();\n    return !(userId == null || userId === 0 || userId === "0" || userId === "null" || userId === "");\n  },\n  logout: function (domain, logoutUrl, defaultUrl) {\n    if ($.isNullOrEmpty(logoutUrl)) {\n      logoutUrl = this.url.logout_url;\n    }\n    if ($.isNullOrEmpty(defaultUrl)) {\n      defaultUrl = this.url.manage;\n    }\n    $.ajax.json($.url.root + logoutUrl, function (result) {\n      var permissionKey = result.value;\n      if ($.isNullOrEmpty(permissionKey)) {\n        permissionKey = $.browser.cookie.permission;\n      }\n      // 注销成功后回调\n      $.browser.setCookie(permissionKey, "0", -1, domain);\n      if ($.url.root + "/" === window.parent.location.href || window.parent.location.href.indexOf(defaultUrl) !== -1) {\n        window.parent.location.href = $.url.root;\n      } else {\n        window.location.href = window.location.href;\n      }\n    }, true);\n  },\n  /***************************************************************************\n   * 取窗口可视范围的高度\n   **************************************************************************/\n  getClientHeight: function () {\n    return document.body.clientHeight && document.documentElement.clientHeight ? Math.min(document.body.clientHeight, document.documentElement.clientHeight) : Math.max(document.body.clientHeight, document.documentElement.clientHeight);\n  },\n  /***************************************************************************\n   * 取文档内容实际高度\n   **************************************************************************/\n  getScrollHeight: function () {\n    return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n  },\n  linkClick: function (condition, message) {\n    if (typeof condition === "boolean") {\n      if (!condition) {\n        $.alert(message, "sad");\n        return false;\n      }\n      return true;\n    }\n    //非field.value==1 则为this对象\n    if (condition.href === "javascript:void(0);") {\n      $.alert(message, "sad");\n      return false;\n    }\n    return true;\n  }\n};\nSparrow.container = {};\nSparrow.global = function (key, obj) {\n  if (typeof obj === "undefined") {\n    return this.container[key];\n  }\n  this.container[key] = obj;\n};\nSparrow.remove = function (key) {\n  delete this.container[key];\n};\nSparrow.url = {\n  root: $(function () {\n    // var pathName = window.location.pathname === "/" ? ""\n    //     : ("/" + window.location.pathname.split(\'/\')[1]);\n    // return window.location.protocol + "//" + window.location.host\n    //     + ("");\n  }),\n  _resource: function (path) {\n    var scripts = document.scripts;\n    var sparrowPath = ["/scripts/sparrow.js", "/scripts/sparrow-min.js", "/scripts-dev/sparrow.js"];\n    if (path) {\n      sparrowPath = [path];\n    }\n    if (scripts == null || scripts.length === 0) {\n      return null;\n    }\n    var r = null;\n    for (var i = 0; i < scripts.length; i++) {\n      var brk = false;\n      sparrowPath.forEach(function () {\n        for (var j = 0; j < sparrowPath.length; j++) {\n          var p = sparrowPath[j];\n          var startIndex = scripts[i].src.indexOf(p);\n          if (startIndex > -1) {\n            r = scripts[i].src.substring(0, startIndex);\n            brk = true;\n          }\n        }\n      });\n      if (brk) {\n        break;\n      }\n    }\n    return r;\n  },\n  name: $.browser.cookie.domain.split(\'.\')[0]\n};\nSparrow.url.resource = $.url._resource();\nSparrow.url.passport = $(function () {\n  return "http://passport." + $.browser.cookie.root_domain;\n});\nSparrow.website = {\n  name: $.browser.getCookie($.browser.cookie.website_name),\n  themes: $(function () {\n    var themes = $.browser.getCookie($.browser.cookie.themes);\n    if (themes == null) {\n      themes = "themes_default";\n    }\n    return themes;\n  })\n};\nSparrow.css = {\n  menu: {\n    frame: "background:#ffffff;position:absolute;z-index:1000;border:#ccc 1px solid;width:{0}px;height:auto;left:{1}px;top:{2}px;display:none",\n    ul: "width:{0}px;height:auto;overflow:hidden;list-style:none;margin:0px;padding:0px;text-align:left",\n    li: "width:{0}px;overflow:hidden;line-height:20px;margin:0px;border-bottom:#ccc 1px dotted;cursor:pointer;"\n  }\n};\nSparrow.SIDE = "SIDE";\nSparrow.HORIZONTAL = "HORIZONTAL";\nSparrow.VERTICAL = "VERTICAL";\nSparrow.DEFAULT_AVATOR_URL = $.url.resource + "/images/user.png";\nSparrow.DEFAULT_RESOURCE_ICO_URL = $.url.resource + "/images/menu.png";\nSparrow.ajax = {\n  tokenConfig: {},\n  _objPool: [],\n  referWindow: window,\n  url: null,\n  srcElement: null,\n  SUCCESS: "0",\n  _bindReadyStateChange: function (objXMLHttp, callback) {\n    objXMLHttp.onreadystatechange = function () {\n      if (objXMLHttp.readyState !== 4) {\n        return;\n      }\n      if (objXMLHttp.status === 200) {\n        if (objXMLHttp.responseText.indexOf(\'"login":false\') !== -1) {\n          console.log("login false");\n          var config = objXMLHttp.responseText.json();\n          document.domain = $.browser.cookie.root_domain;\n          if (config.inFrame) {\n            window.parent.location.href = config.url;\n          } else {\n            $.window(config);\n          }\n          return;\n        }\n        if (objXMLHttp.responseText.indexOf("Access Denied") !== -1) {\n          if (!lang.message.accessDenied) lang.message.accessDenied = "Access Denied";\n          $.alert(lang.message.accessDenied, "sad");\n          return;\n        }\n        if (callback) {\n          callback(objXMLHttp.responseText);\n          return;\n        }\n      }\n      if (objXMLHttp.status === 404) {\n        console.log("资源未找到");\n        return;\n      }\n      if (objXMLHttp.status === 500) {\n        console.log("服务器错误"); //\n        return;\n      }\n      if (objXMLHttp.status === 12031) {\n        console.log("服务器未启动"); //\n        return;\n      }\n      console.log(objXMLHttp.status + ":未知错误");\n    };\n  },\n  _getInstance: function () {\n    for (var i = 0; i < this._objPool.length; i += 1) {\n      if (this._objPool[i].readyState === 0 || this._objPool[i].readyState === 4) {\n        return this._objPool[i];\n      }\n    }\n    this._objPool[this._objPool.length] = this._createObj();\n    return this._objPool[this._objPool.length - 1];\n  },\n  _createObj: function () {\n    var http_request = null;\n    if (window.XMLHttpRequest) {\n      http_request = new XMLHttpRequest();\n      if (http_request.overrideMimeType) {\n        http_request.overrideMimeType("text/xml");\n      }\n      return http_request;\n    }\n    if (window.ActiveXObject) {\n      try {\n        http_request = new ActiveXObject("Msxml2.XMLHTTP");\n      } catch (e) {\n        try {\n          http_request = new ActiveXObject("Microsoft.XMLHTTP");\n        } catch (e) {}\n      }\n    } else {\n      console.log("浏览器不支持AJAX,请设置浏览器安全级别或更新浏览器");\n    }\n    return http_request;\n  },\n  _callback: function (responseText) {\n    var result = responseText.json();\n    if (result == null) {\n      $.message("json parse error " + responseText);\n      return;\n    }\n    if (result.code !== this.ajax.SUCCESS) {\n      $.message(result.message);\n    }\n  },\n  gourl: function (url) {\n    this.ajax.referWindow.location.href = url;\n  },\n  _findToken: function (url) {\n    var token = null;\n    for (var baseUrl in this.tokenConfig) {\n      if (url.indexOf(baseUrl) === 0) {\n        token = this.tokenConfig[baseUrl];\n        break;\n      }\n    }\n    return token;\n  },\n  req: function (getOrPost, url, callback, postStr, srcElement) {\n    if (url.indexOf("http://") === -1) {\n      url = $.url.root + url;\n    }\n    var objXMLHttp = this._getInstance();\n    if (objXMLHttp != null) {\n      this._bindReadyStateChange(objXMLHttp, callback);\n    }\n    if (srcElement) {\n      this.srcElement = srcElement;\n    }\n    //https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with\n    //with (objXMLHttp) {\n    try {\n      objXMLHttp.open(getOrPost, url, true);\n      objXMLHttp.setRequestHeader("ajax", "true");\n      objXMLHttp.setRequestHeader("pragma", "no-cache");\n      objXMLHttp.setRequestHeader("cache-control", "no-cache");\n      var token = this._findToken(url);\n      if (token) {\n        for (var key in token) {\n          objXMLHttp.setRequestHeader(key, token[key]());\n        }\n      }\n      if (getOrPost === "GET") {\n        objXMLHttp.send(null);\n        return;\n      }\n      //warn: Parameters: Character decoding failed\n      if (typeof postStr === "object") {\n        objXMLHttp.setRequestHeader("Content-Type", "application/json");\n        objXMLHttp.send(JSON.stringify(postStr));\n        return;\n      }\n      if (!postStr) {\n        objXMLHttp.send();\n        return;\n      }\n      postStr = postStr.replace(/%/g, "%25");\n      objXMLHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");\n      objXMLHttp.send(postStr);\n    } catch (e) {\n      console.log(e);\n    }\n  },\n  //内部业务使用\n  json: function (url, data, callback, srcElement, token) {\n    if (typeof data === "function") {\n      callback = data;\n      data = null;\n    }\n    $.ajax.req("POST", url, function (responseText) {\n      var result = responseText.json();\n      if (result == null) {\n        $.message("json parse error " + responseText);\n        return;\n      }\n      if (result.code === $.ajax.SUCCESS) {\n        if (callback) {\n          callback(result);\n        } else {\n          $.message(result.message, $.ajax.srcElement);\n        }\n      } else {\n        $.message(result.message, $.ajax.srcElement);\n      }\n    }, data, srcElement, token);\n  },\n  get: function (url, callback) {\n    callback = callback ? callback : $.ajax._callback;\n    $.ajax.req("GET", url, callback, null, null);\n  },\n  post: function (url, data, callback) {\n    callback = callback ? callback : $.ajax._callback;\n    $.ajax.req("POST", url, callback, data, null);\n  }\n};\nSparrow.http = {\n  post: function (url, data, token) {\n    return new Promise((resolve, reject) => {\n      Sparrow.ajax.post(url, data, function (responseText) {\n        var result = responseText.json();\n        if (result == null) {\n          reject(responseText);\n          return;\n        }\n        resolve(result);\n      }, token);\n    });\n  },\n  get: function (url, token) {\n    return new Promise((resolve, reject) => {\n      Sparrow.ajax.get(url, function (responseText) {\n        var result = responseText.json();\n        if (result == null) {\n          reject(responseText);\n          return;\n        }\n        resolve(result);\n      });\n    }, token);\n  }\n};\n\n/*------------------------------------validate 表单验证------------------------------------------------*/\n/*\n * key ==ctrlId\n *\n * errorCtrlId\n *\n * prompt\n *\n * nullError\n *\n * emailError\n *\n * lengthError\n *\n * dateError\n *\n        prompt: \'请输入您的原始密码\',\n        minLength: 6,\n        maxLength: 16,\n        lengthError: \'密码至少6位\',\n        setError: \'原始密码输入错误\',\n        isExist: false,\n        parentLevel:0\n */\nSparrow.v = {\n  background_color: \'#fff\',\n  empty_string: \'\',\n  //字段的索引\n  index: null,\n  right_message: \'<img alt="" src="\' + $.url.resource + \'/images/\' + $.website.themes + \'/succeed.gif"/>\',\n  reset: function () {\n    $.v.index = null;\n  },\n  getErrorLabel: function (validate) {\n    return validate.errorCtrlId ? $(validate.errorCtrlId.join($.v.index)) : null;\n  },\n  //click blur 替换成initPlaceholder\n  initPlaceholder: function (json) {\n    for (var o in json) {\n      var property = json[o];\n      var ctrl = $(o);\n      if (ctrl != null && ctrl.type === "text") {\n        ctrl.placeholder = property.prompt;\n      }\n    }\n  },\n  // 设置当前控件的父控件背景\n  _setBackground: function (validate, color, srcElement) {\n    if (!srcElement) {\n      return;\n    }\n    if ($.v.background_color === false) {\n      return;\n    }\n    if (!color) color = $.v.background_color;\n    var parentLevel = validate.parentLevel;\n    if (typeof parentLevel == "undefined") {\n      parentLevel = 1;\n    }\n    if (parentLevel > 0) {\n      var background = srcElement;\n      if (background == null) return;\n      try {\n        while (background.tagName.toUpperCase() !== "TR" && background.className !== "line" && background.className !== "validate") {\n          background = background.parentNode;\n        }\n        background.style.background = color;\n      } catch (err) {}\n      var errorCtrl = this.getErrorLabel(validate);\n      if (errorCtrl != null) errorCtrl.className = "front";\n    }\n  },\n  showMessage: function (validate, srcElement) {\n    validate = validate[srcElement.id];\n    var errorCtrl = this.getErrorLabel(validate);\n    if (errorCtrl) {\n      errorCtrl.className = "prompt";\n      errorCtrl.innerHTML = validate.prompt;\n    }\n    this._setBackground(validate);\n  },\n  ok: function (validate, srcElement) {\n    var errorLabel = this.getErrorLabel(validate);\n    if (errorLabel) {\n      errorLabel.innerHTML = this.right_message;\n      errorLabel.className = "prompt";\n    }\n    this._setBackground(validate, "#ffffff", srcElement);\n    if (srcElement) {\n      srcElement.style.backgroundColor = "#ffffff";\n      if (srcElement.value === "" && validate.defaultValue) srcElement.value = validate.defaultValue;\n    }\n    return true;\n  },\n  fail: function (validate, errorInfo) {\n    if (!errorInfo) {\n      errorInfo = validate.setError;\n    }\n    var errorCtrl = this.getErrorLabel(validate);\n    if (errorCtrl) {\n      errorCtrl.innerHTML = "!" + errorInfo;\n      errorCtrl.className = "error";\n    }\n    return "!" + errorInfo;\n  },\n  _validate: function (validate, srcElement) {\n    this._setBackground(validate, "#ffffff", srcElement);\n    var srcElementValue = srcElement.value.trim();\n    var errorCtrl = this.getErrorLabel(validate);\n    var length = srcElement.tagName.toUpperCase() === "SELECT" && srcElement.multiple === true ? srcElement.options.length : srcElementValue.getByteLength();\n    //允许空\n    if (length === 0 && validate.allowNull) {\n      return this.ok(validate);\n    }\n    //空但有默认值\n    if (length === 0 && validate.defaultValue !== undefined) {\n      srcElement.value = validate.defaultValue;\n      return this.ok(validate);\n    }\n    //不允许为空\n    if (length === 0 && !validate.allowNull) {\n      return this.fail(validate, validate.nullError);\n    }\n    // 长度不合法\n    if (validate.maxLength && length > validate.maxLength || validate.minLength && length < validate.minLength) {\n      return this.fail(validate, validate.lengthError);\n    }\n\n    //ajax 错误未修改\n    if (errorCtrl && errorCtrl.className === "error" && errorCtrl.innerHTML === "!" + validate.setError) {\n      return this.fail(validate);\n    }\n    return true;\n  },\n  isUserNameRule: function (validate, srcElement) {\n    validate = validate[srcElement.id];\n    var result = this._validate(validate, srcElement);\n    if (result !== true) {\n      return result;\n    }\n    if (srcElement.value.search(/^[a-zA-Z0-9_]{6,20}$/) === -1) {\n      return this.fail(validate, validate.nameRuleError);\n    }\n    return this.ok(validate, srcElement);\n  },\n  isEmail: function (validate, srcElement) {\n    validate = validate[srcElement.id];\n    var result = this._validate(validate, srcElement);\n    if (result !== true) {\n      return result;\n    }\n    if (srcElement.value.search(/\\w+([-+.\']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/) === -1) {\n      return this.fail(validate, validate.emailError);\n    }\n    return this.ok(validate, srcElement);\n  },\n  isTel: function (validate, srcElement) {\n    validate = validate[srcElement.id];\n    var result = this._validate(validate, srcElement);\n    if (result !== true) {\n      return result;\n    }\n    if (srcElement.value.search(/^(0[0-9]{2,3}\\-)?([2-9][0-9]{6,7})+(\\-[0-9]{1,4})?$/) === -1) {\n      return this.fail(validate, validate.telError);\n    }\n    return this.ok(validate, srcElement);\n  },\n  isMobile: function (validate, srcElement) {\n    validate = validate[srcElement.id];\n    validate.minLength = 11;\n    validate.maxLength = 11;\n    var result = this._validate(validate, srcElement);\n    if (result !== true) {\n      return result;\n    }\n    if (srcElement.value.search(/^1[\\d]{10}$/) === -1) {\n      return this.fail(validate, validate.mobileError);\n    }\n    return this.ok(validate, srcElement);\n  },\n  isIdCard: function (validate, srcElement) {\n    validate = validate[srcElement.id];\n    var result = this._validate(validate, srcElement);\n    if (result !== true) {\n      return result;\n    }\n    if (srcElement.value.search(/^([1-9]([0-9]{16}|[0-9]{13})([0-9]|x|X))$/) === -1) {\n      return this.fail(validate, validate.idCardError);\n    }\n    return this.ok(validate, srcElement);\n  },\n  isNull: function (validate, srcElement) {\n    validate = validate[srcElement.id];\n    var result = this._validate(validate, srcElement);\n    if (result !== true) {\n      return result;\n    }\n    return this.ok(validate, srcElement);\n  },\n  isChineseCharacters: function (validate, srcElement) {\n    validate = validate[srcElement.id];\n    var result = this._validate(validate, srcElement);\n    if (result !== true) {\n      return result;\n    }\n    if (!validate.allowNull && srcElement.value.search(/^[\\u4e00-\\u9fa5]+/) === -1) {\n      return this.fail(validate, validate.chineseCharactersError);\n    }\n    return this.ok(validate, srcElement);\n  },\n  isEqual: function (validate, srcElement) {\n    validate = validate[srcElement.id];\n    var result = this._validate(validate, srcElement);\n    if (result !== true) {\n      return result;\n    }\n    if (srcElement.value !== $(validate.otherCtrlId.join($.v.index)).value.trim()) {\n      return this.fail(validate, validate.noEqualError);\n    }\n    return this.ok(validate, srcElement);\n  },\n  allowInputOption: function (validate, srcElement) {\n    validate = validate[srcElement.id];\n    if (!validate.defaultValue) {\n      validate.defaultValue = validate.options[0];\n    }\n    for (var i = 0; i < validate.options.length; i++) {\n      if (srcElement.value == validate.options[i]) {\n        break;\n      }\n    }\n    if (i == validate.options.length) {\n      srcElement.value = validate.defaultValue;\n    }\n    this.ok(validate, srcElement);\n  },\n  isDigital: function (validate, srcElement) {\n    validate = validate[srcElement.id];\n    var srcElementValue = srcElement.value;\n    var result = this._validate(validate, srcElement);\n    if (result !== true) {\n      return result;\n    }\n    if (isNaN(srcElementValue)) {\n      return this.fail(validate, validate.digitalError);\n    }\n    var floatValue = parseFloat(srcElementValue);\n    //最小值 定义\n    var defMin = validate.minValue || validate.minValue === 0;\n    //最大值 定义\n    var defMax = validate.maxValue || validate.maxValue === 0;\n    if (defMin && floatValue < validate.minValue || defMax && floatValue > validate.maxValue) {\n      return this.fail(validate, validate.digitalError);\n    }\n    this.ok(validate, srcElement);\n  },\n  isImgSize: function (srcElement, defaultValue) {\n    var size = srcElement.value.split(\'*\');\n    if (size.length === 2) {\n      if (size[0].search(/^[0-9]+.?[0-9]$/) === -1 || size[1].search(/^[0-9]+.?[0-9]$/) === -1) {\n        srcElement.value = defaultValue;\n      }\n    } else {\n      srcElement.value = defaultValue;\n    }\n  },\n  isFileLength: function (srcElement, defaultValue) {\n    if (srcElement.value.toUpperCase().indexOf("M") !== -1) {\n      if (srcElement.value.toUpperCase().split(\'M\')[0].search(/^[0-9]+.?[0-9]$/) !== -1) {\n        srcElement.value = srcElement.value.toUpperCase().split(\'M\')[0] + "MB";\n      } else {\n        srcElement.value = defaultValue;\n      }\n      return;\n    }\n    if (srcElement.value.toUpperCase().indexOf("K") !== -1) {\n      if (srcElement.value.toUpperCase().split(\'K\')[0].search(/^[0-9]+.?[0-9]$/) !== -1) {\n        srcElement.value = srcElement.value.toUpperCase().split(\'K\')[0] + "KB";\n      } else {\n        srcElement.value = defaultValue;\n      }\n      return;\n    }\n    srcElement.value = defaultValue;\n  },\n  updateTxtCount: function (srcElement, showCtrl, maxLength, e) {\n    var ctrl = $(showCtrl);\n    e = e || window.event;\n    if (e.keyCode < 37 || e.keyCode > 40) {\n      var length = srcElement.value.getByteLength();\n      var allowInputLength = maxLength - length;\n      if (allowInputLength <= 0) {\n        ctrl.innerHTML = 0;\n        srcElement.value = srcElement.value.subString(maxLength, false);\n      } else {\n        ctrl.innerHTML = allowInputLength;\n      }\n    }\n  },\n  /* 获取验证信息*/\n  /*action=false则不提交*/\n  /*action=update.do 指定提交*/\n  /*action=function(){}*\n   /*action=$(#object)*/\n  /*action默认为提交*/\n  getValidateResult: function (json, action) {\n    var wrongInfo = [];\n    for (var o in json) {\n      var property = json[o];\n      if (!property) {\n        continue;\n      }\n      if (typeof property !== "object") {\n        continue;\n      }\n      var error = null;\n      var ctrl = $(o);\n      if (!ctrl) {\n        continue;\n      }\n      //已输入过 则一定会会error message\n      var errorCtrl = this.getErrorLabel(property);\n      //可能无error ctrl\n      if (errorCtrl) {\n        if (errorCtrl.className === "error") {\n          error = errorCtrl.innerHTML;\n        }\n      }\n      //未输入过 则判断null\n      if ($.isNullOrEmpty(error)) {\n        error = $.v.isNull(json, ctrl);\n      }\n      //无onblur  此情况无ajax请求\n      if ($.v.validate) {\n        error = $.v.validate();\n      }\n      if (error !== true && !$.isNullOrEmpty(error)) {\n        wrongInfo.push(error);\n      }\n    }\n    if (wrongInfo.length > 0) {\n      $.message(wrongInfo.join("<br/>"));\n      return false;\n    }\n    if (action !== false) {\n      if (typeof action === "string" || typeof action === "undefined") {\n        $.submit(action);\n      } else if (typeof action === "function") {\n        action(this);\n      } else if (typeof action === "object" && action.s.type === "hidden") {\n        var actionUrl = action.attr("new");\n        if (!$.isNullOrEmpty(action.value())) {\n          actionUrl = action.attr("update");\n        }\n        $.submit(actionUrl);\n      }\n    }\n    return true;\n  },\n  init: function (config) {\n    for (var o in config) {\n      var ctrl = $("#" + o);\n      var validation = config[o];\n      var event = validation.event;\n      ctrl.bind("onfocus", function () {\n        $.v.showMessage(config, this);\n      });\n      switch (event) {\n        case "UserNameRuleValidator":\n          ctrl.bind("onblur", function () {\n            $.v.isUserNameRule(config, this);\n          });\n          break;\n        case "AllowOptionsValidator":\n          ctrl.bind("onblur", function () {\n            $.v.isNull(config, this);\n          });\n          break;\n        case "DigitalValidator":\n          ctrl.bind("onblur", function () {\n            $.v.isDigital(config, this);\n          });\n          break;\n        case "EmailValidator":\n          ctrl.bind("onblur", function () {\n            $.v.isEmail(config, this);\n          });\n          break;\n        case "NullValidator":\n          ctrl.bind("onblur", function () {\n            $.v.isNull(config, this);\n          });\n          break;\n        case "EqualValidator":\n          ctrl.bind("onblur", function () {\n            $.v.isEqual(config, this);\n          });\n          break;\n        case "IdCardValidator":\n          ctrl.bind("onblur", function () {\n            $.v.isIdCard(config, this);\n          });\n          break;\n        case "MobileValidator":\n          ctrl.bind("onblur", function () {\n            $.v.isMobile(config, this);\n          });\n          break;\n        case "TelValidator":\n          ctrl.bind("onblur", function () {\n            $.v.isTel(config, this);\n          });\n          break;\n        case "ChineseCharactersValidator":\n          ctrl.bind("onblur", function () {\n            $.v.isChineseCharacters(config, this);\n          });\n          break;\n        case "AllowInputCharLengthValidator":\n          var innerInfo = validation;\n          $("#" + innerInfo.maxCharLengthControlId).html(innerInfo.maxAllowCharLength);\n          ctrl.bind("onblur", function () {\n            $.v.allowInputOption(config, this);\n          });\n          ctrl.bind("onkeyup", function () {\n            $.v.updateTxtCount(this, innerInfo.allowCharLengthShowControlId, 500);\n          });\n      }\n    }\n  }\n};\nSparrow.page = {\n  toTargetPage: function (pageCount, pageFormat, srcElement) {\n    var consumerPageIndex = parseInt($(\'consumerPageIndex\').value);\n    var currentPageIndex = parseInt($(\'spanCurrentPageIndex\').innerHTML.trim());\n    if (consumerPageIndex <= 0 || consumerPageIndex > pageCount) {\n      $.message(\'超出页码范围\', srcElement);\n      return;\n    }\n    if (consumerPageIndex === currentPageIndex) {\n      $.message(\'当前页即是目标页\', srcElement);\n      return;\n    }\n    window.location.href = pageFormat.replace("$pageIndex", consumerPageIndex);\n  },\n  consumerAction: null,\n  submit: function (pageIndex, formIndex) {\n    $("currentPageIndex").value = pageIndex;\n    window.location.href = "#top";\n    if (this.consumerAction != null) {\n      this.consumerAction(pageIndex);\n      return;\n    }\n    $.submit(null, formIndex);\n  },\n  next: function () {\n    var elementArray = $("divPage").getElementsByTagName("a");\n    var nextLink = null;\n    for (var i = 0; i < elementArray.length; i++) {\n      if (elementArray[i].innerHTML === "下一页") {\n        nextLink = elementArray[i].href;\n        break;\n      }\n    }\n    if ($.isNullOrEmpty(nextLink)) {\n      alert("亲，您已经翻到最后了哟");\n      return;\n    }\n    window.location.href = nextLink;\n  }\n};\nSparrow.random = function () {\n  return (Math.random() + "").substring(2);\n};\nSparrow.randomUrl = function (url) {\n  if (url.indexOf("t=") !== -1) {\n    url = url.substr(0, url.indexOf("t=") - 1);\n  }\n  if (url.indexOf("?") !== -1) {\n    url += "&t=" + Math.random();\n  } else {\n    url += "?t=" + Math.random();\n  }\n  return url;\n};\nSparrow.request = function (name) {\n  var reg = new RegExp("(^|\\\\?|&)" + name + "=([^&]*)(\\\\s|&|$)", "i");\n  if (reg.test(location.href)) {\n    return unescape(RegExp.$2.replace(/\\+/g, " "));\n  }\n  return "";\n};\nSparrow.isNullOrEmpty = function (sourceString) {\n  return sourceString == null || typeof sourceString === "undefined" || typeof sourceString === "string" && (sourceString.trim() === "" || sourceString.trim() === "null");\n};\nSparrow.toString = function (sourceString, defaultValue) {\n  if (!defaultValue) {\n    defaultValue = "";\n  }\n  if ($.isNullOrEmpty(sourceString)) {\n    return defaultValue;\n  }\n  return sourceString;\n};\nSparrow.countDown = function (end, current, element) {\n  var t = end - current;\n  var count = {};\n  var d = Math.floor(t / 1000 / 60 / 60 / 24);\n  var h = Math.floor(t / 1000 / 60 / 60 % 24);\n  var m = Math.floor(t / 1000 / 60 % 60);\n  var s = Math.floor(t / 1000 % 60);\n  element.value = (d > 0 ? d + "天" : \'\') + (h > 0 ? h + "时" : \'\') + (m > 0 ? m + "分" : \'\') + (s < 0 ? 0 : s) + "秒";\n  var call = arguments.callee;\n  if (d > 0 || h > 0 || m > 0 || s > 0) {\n    setTimeout(function () {\n      call(end, current + 1000, element);\n    }, 1000);\n  }\n};\n// 获取**时间格式\nSparrow.getBeforeTime = function (updateTime) {\n  updateTime = new Date(updateTime).valueOf();\n  var currentTime = new Date().valueOf();\n  var beforeDateConfig = [{\n    name: "秒",\n    split: 60\n  }, {\n    name: "分钟",\n    split: 60\n  }, {\n    name: "小时",\n    split: 24\n  }, {\n    name: "天",\n    split: 30\n  }, {\n    name: "月",\n    split: 12\n  }, {\n    name: "年",\n    split: 100\n  }];\n  return $(function (timeSplit, depth) {\n    if (timeSplit / beforeDateConfig[depth].split < 1) {\n      // 本地时间与服务器时间不一致导致出现负数\n      return (parseInt(timeSplit) < 0 ? 1 : parseInt(timeSplit)) + beforeDateConfig[depth].name;\n    } else {\n      return arguments.callee(timeSplit / beforeDateConfig[depth].split, ++depth);\n    }\n  }, (currentTime - updateTime) / 1000, 0);\n};\nSparrow.submit = function (action, formIndex) {\n  formIndex = formIndex ? formIndex : 0;\n  if (action) {\n    document.forms[formIndex].action = action;\n  }\n  document.forms[formIndex].submit();\n};\nSparrow.jsonKeys = function (json) {\n  var jsonKeyArray = [];\n  if (!json) {\n    return jsonKeyArray;\n  }\n  //{}.prototype会多一个this该方法本身\n  //区分数组和json\n  if (typeof json.length === "undefined") {\n    for (var key in json) {\n      jsonKeyArray.push(key);\n    }\n    return jsonKeyArray;\n  }\n  return json;\n};\nSparrow.clearForm = function (validateJson) {\n  var inputArray = $.jsonKeys(validateJson);\n  for (var i = 0; i < inputArray.length; i++) {\n    var input = $(inputArray[i]);\n    if (input == null) {\n      console.log(inputArray[i] + " not exist!");\n      continue;\n    }\n    var defaultValue = "";\n    if (validateJson[inputArray[i]]) defaultValue = validateJson[inputArray[i]].defaultValue;\n    input.value = $.toString("", defaultValue);\n  }\n};\nSparrow.getFormData = function (inputIdArray) {\n  //{}.prototype会多一个this该方法本身\n  var data = [];\n  var inputArray = $.jsonKeys(inputIdArray);\n  for (var i = 0; i < inputArray.length; i++) {\n    var input = $(inputArray[i]);\n    if (input == null) {\n      console.log(inputArray[i] + " not exist!");\n      continue;\n    }\n    if (!$.isNullOrEmpty(input.name)) {\n      var value = input.value;\n      //todo 加判断其他控件\n      data.push(input.name + "=" + value);\n    }\n  }\n  return data.join("&");\n};\nSparrow.waitRedirect = function (timerId, period) {\n  var queryString = $("#hdnQueryString").value();\n  var timer = $("#" + timerId);\n  if (timer == null || timer.s == null) return;\n  if (!period) period = 1000;\n  var interval = window.setInterval(function () {\n    var time = parseInt(timer.html(), 10);\n    if (time-- === 0) {\n      window.location.target = "_self";\n      window.location.href = queryString;\n      window.clearInterval(interval);\n    } else {\n      timer.html(time);\n    }\n  }, period);\n};\nSparrow.format = function (txt, compress) {\n  /* 格式化JSON源码(对象转换为JSON文本) */\n  var indentChar = \'    \';\n  if (typeof txt === \'string\' && /^\\s*$/.test(txt)) {\n    alert(\'数据为空,无法格式化! \');\n    return;\n  }\n  var data = null;\n  if (typeof txt === \'object\') {\n    data = txt;\n  } else {\n    try {\n      data = eval(\'(\' + txt + \')\');\n    } catch (e) {\n      alert(\'数据源语法错误,格式化失败! 错误信息: \' + e.description, \'err\');\n      return;\n    }\n  }\n  var draw = [],\n    last = false,\n    This = this,\n    line = compress ? \'\' : \'\\n\',\n    nodeCount = 0,\n    maxDepth = 0;\n  var notify = function (name, value, isLast, indent /*缩进*/, formObj) {\n    nodeCount++;\n    /*节点计数*/\n    for (var i = 0, tab = \'\'; i < indent; i++) tab += indentChar;\n    /* 缩进HTML */\n    tab = compress ? \'\' : tab;\n    /*压缩模式忽略缩进*/\n    maxDepth = ++indent;\n    /*缩进递增并记录*/\n    if (value && value.constructor === Array) {\n      /*处理数组*/\n      draw.push(tab + (formObj ? \'"\' + name + \'":\' : \'\') + \'[\' + line);\n      /*缩进\'[\' 然后换行*/\n      for (var i = 0; i < value.length; i++) notify(i, value[i], i === value.length - 1, indent, false);\n      draw.push(tab + \']\' + (isLast ? line : \',\' + line));\n      /*缩进\']\'换行,若非尾元素则添加逗号*/\n    } else if (value && typeof value === \'object\') {\n      /*处理对象*/\n      draw.push(tab + (formObj ? \'"\' + name + \'":\' : \'\') + \'{\' + line);\n      /*缩进\'{\' 然后换行*/\n      var len = 0,\n        i = 0;\n      for (var key in value) len++;\n      for (var key in value) notify(key, value[key], ++i === len, indent, true);\n      draw.push(tab + \'}\' + (isLast ? line : \',\' + line));\n      /*缩进\'}\'换行,若非尾元素则添加逗号*/\n    } else {\n      if (typeof value === \'string\') value = \'"\' + value + \'"\';\n      draw.push(tab + (formObj ? \'"\' + name + \'":\' : \'\') + value + (isLast ? \'\' : \',\') + line);\n    }\n  };\n  var isLast = true,\n    indent = 0;\n  notify(\'\', data, isLast, indent, false);\n  return draw.join(\'\');\n};\n//取得指定对象的指定方法,并传递Window.Event事件参数. 必须以obj和method形式传递\nSparrow.bind = function (obj, m, args) {\n  return function (e) {\n    if (m.indexOf("|") > -1) {\n      var MethodArray = m.split("|");\n      for (var x = 0; x < MethodArray.length; x++) {\n        args ? obj[MethodArray[x]](args, e) : obj[MethodArray[x]](e);\n      }\n    } else {\n      args ? obj[m](args, e) : obj[m](e);\n    }\n  };\n};\n\n// 插件扩展1)each\nSparrow.prototype.each = function (method) {\n  for (var i = 0, l = this.length; i < l; i++) {\n    //在method中this即为 this[i]\n    method.call(this[i], i, this);\n  }\n};\nSparrow.prototype.attr = function (property, value) {\n  if (!this.s) {\n    return;\n  }\n  if (!$.isNullOrEmpty(value)) {\n    this.s.setAttribute(property, value);\n    return;\n  }\n  var v = this.s.attributes[property];\n  if (v) {\n    return v.value;\n  }\n  return this.s.getAttribute(property);\n};\nSparrow.prototype.html = function (value) {\n  if (!this.s) {\n    return;\n  }\n  if (!$.isNullOrEmpty(value)) {\n    this.s.innerHTML = value;\n    return;\n  }\n  return this.s.innerHTML;\n};\nSparrow.prototype.format = function (html, args) {\n  if (!this.s) {\n    return;\n  }\n  if ($(html) != null) {\n    html = $("#" + html).html();\n  }\n  this.s.innerHTML = html.format(args);\n};\nSparrow.prototype.value = function (value) {\n  if (!this.s) {\n    return;\n  }\n  if (value === undefined || value === null) {\n    return this.s.value;\n  }\n  this.s.value = value;\n};\nSparrow.prototype.check = function (value) {\n  for (var i = 0; i < this.length; i++) {\n    if (this[i].value === value) {\n      this[i].checked = "checked";\n      break;\n    }\n  }\n};\nSparrow.prototype.opacity = function (n) {\n  if (n >= 0) {\n    // ie<10\n    this.s.style.filter = \'alpha(opacity=\' + n + \')\';\n    // ie=10 firefox ...\n    this.s.style.opacity = n / 100;\n    this.s.setAttribute("opacity", n);\n    return;\n  }\n  var opacity = this.s.attributes["opacity"];\n  if (!opacity) {\n    return 100;\n  } else {\n    return opacity.value;\n  }\n};\n\n// 要附加事件的控件\n// 事件全名onclick\n// 事件委托方法\nSparrow.prototype.bind = function (eventName, eventHandle) {\n  if (!this.s) return;\n  if (this.s.attachEvent) {\n    this.s.attachEvent(eventName, eventHandle);\n    return;\n  }\n  this.s.addEventListener(eventName.substring(2), eventHandle, false);\n};\nSparrow.prototype.getAbsoluteTop = function () {\n  var ctrl = this.s;\n  var srcObj = typeof ctrl === "string" ? $(ctrl) : ctrl;\n  var returnValue = srcObj.offsetTop;\n  while ((srcObj = srcObj.offsetParent) != null) {\n    returnValue += srcObj.offsetTop;\n  }\n  return returnValue;\n};\nSparrow.prototype.getAbsoluteLeft = function () {\n  var ctrl = this.s;\n  var srcObj = typeof ctrl === "string" ? $(ctrl) : ctrl;\n  var returnValue = srcObj.offsetLeft;\n  while ((srcObj = srcObj.offsetParent) != null) {\n    returnValue += srcObj.offsetLeft;\n  }\n  return returnValue;\n};\nSparrow.prototype.source = function () {\n  return this.s;\n};\nSparrow.prototype.class = function (className) {\n  if (className) {\n    this.s.className = className;\n    return;\n  }\n  return this.s.className;\n};\nSparrow.prototype.css = function (attribute, value, add) {\n  if (Math.abs(value) < 1) {\n    value = value < 0 ? -1 : 1;\n  }\n  if (attribute === "opacity") {\n    value = Math.ceil(value);\n    if (add) {\n      value = parseInt(this.opacity(), 10) + value;\n    }\n    this.opacity(value);\n  } else {\n    var command = null;\n    if (add) {\n      command = \'var o=parseInt($("\' + this.s.id + \'").style.\' + attribute + \',10);\';\n      command += \'$("\' + this.s.id + \'").style.\' + attribute + \'=(o+\' + value + \')+"px";\';\n    } else {\n      command = \'$("\' + this.s.id + \'").style.\' + attribute + \'="\' + value + \'"\';\n    }\n    eval(command);\n  }\n  return this;\n};\nSparrow.prototype.change_check_box_class = function (checked, index, key, split) {\n  var className = this.s.className;\n  if (!split) {\n    split = "_";\n  }\n  var classNameArray = className.split(split);\n  if (!key) {\n    key = "check";\n  }\n  if (!index) {\n    index = classNameArray.length;\n  }\n  if (checked) {\n    if (className.indexOf(key) < 0) {\n      classNameArray.splice(index, 0, key);\n      this.s.className = classNameArray.join(split);\n    }\n  } else {\n    if (className.indexOf(key) >= 0) {\n      classNameArray.splice(index, 1);\n      this.s.className = classNameArray.join(split);\n    }\n  }\n  classNameArray.splice(index, classNameArray.length - index + 1);\n  return classNameArray.join(class_split);\n};\nSparrow.prototype.contains = function (htmlElement) {\n  while (htmlElement != null && typeof htmlElement.tagName !== "undefined") {\n    if (htmlElement === this.s) return true;\n    htmlElement = htmlElement.parentNode;\n  }\n  return false;\n};\nSparrow.prototype.remove = function () {\n  if (this != null && this.s != null) {\n    this.doc.body.removeChild(this.s);\n    this.s = null;\n  }\n};\nSparrow.prototype.fix = function (top, left) {\n  if (!this.s) {\n    return;\n  }\n  var weight = this.s.offsetWidth;\n  if (!left) {\n    left = this.getAbsoluteLeft();\n  }\n  if ($.browser.ie && $.browser.version === "6.0") {\n    this.doc.documentElement.style.backgroundImage = "url(about:blank)";\n    this.doc.documentElement.style.backgroundAttachment = "fixed";\n    this.doc.body.style.backgroundImage = "url(about:blank)";\n    this.doc.body.style.backgroundAttachment = "fixed";\n    this.s.style.position = "absolute";\n  } else {\n    this.s.style.position = "fixed";\n  }\n  this.s.style.top = top + "px";\n  this.s.style.left = left + "px";\n  this.s.style.width = weight + "px";\n};\nSparrow.prototype.center = function () {\n  if (!this.s) {\n    return;\n  }\n  var left = (this.doc.body.clientWidth - this.s.offsetWidth) / 2;\n  var wordWindowHeight = this.doc.documentElement.clientHeight > screen.availHeight ? screen.availHeight : this.doc.documentElement.clientHeight;\n  var workWindowHeight = wordWindowHeight - (41 + 120);\n  var top = 64 + parseInt((workWindowHeight - this.s.offsetHeight) / 2);\n  this.fix(top, left);\n};\nSparrow.prototype.loadComplete = function (callback) {\n  if (this.s.tagName.toUpperCase() === "IFRAME") {\n    this.s.onload = function () {\n      callback(this);\n    };\n  } else if (this.s.tagName.toUppperCase() === "IMG") {\n    if ($.browser.ie) {\n      this.s.onreadystatechange = function () {\n        if (this.s.readyState === "complete" || this.s.readyState === "loaded") {\n          callback(this);\n        }\n      };\n      return;\n    }\n    this.s.onload = function () {\n      if (this.s.complete === true) {\n        callback(this);\n      }\n    };\n  }\n};\nSparrow.prototype.parent = function () {\n  return $(this.s.parentNode);\n};\nSparrow.prototype.fresh = function (url) {\n  if ($.isNullOrEmpty(this.s.src)) {\n    this.s.src = url;\n  }\n  this.s.src = $.randomUrl(this.s.src);\n};\nSparrow.prototype.enter = function (handle) {\n  this.s.onkeydown = function (e) {\n    e = window.event || e;\n    if (e.keyCode !== 13) {\n      return;\n    }\n    if (typeof handle === "string") {\n      $(handle).onclick(e);\n      return;\n    }\n    handle();\n  };\n};\nvar _hmt = _hmt || [];\n(function () {\n  var hm = document.createElement("script");\n  hm.src = "https://hm.baidu.com/hm.js?11daae2d559a82e0e8bd4872ad217164";\n  var s = document.getElementsByTagName("script")[0];\n  s.parentNode.insertBefore(hm, s);\n})();\n\n/*---------------------------------------------JGridView全选和单选---------------------------------------------*/\nSparrow.gridView = {\n  keyType: "int",\n  // string\n  id: "grvManageList",\n  resultCtrlId: "hdnGridResult",\n  getTable: function () {\n    return $(this.id);\n  },\n  init: function () {\n    var hdnGridResult = $("#" + this.resultCtrlId);\n    if (hdnGridResult == null) {\n      return;\n    }\n    if (!$.isNullOrEmpty(hdnGridResult.attr("gridViewId"))) {\n      this.id = hdnGridResult.attr("gridViewId");\n    }\n    if (!$.isNullOrEmpty(hdnGridResult.attr("keyType"))) {\n      this.keyType = hdnGridResult.attr("keyType");\n    }\n  },\n  getCellIndex: function (checkBox) {\n    return checkBox.parentNode.cellIndex;\n  },\n  allCheckClick: function (allCheckBox) {\n    var checkBoxList = $("&" + this.id);\n    for (var i = 0; i < checkBoxList.length; i += 1) {\n      var checkBox = checkBoxList[i];\n      checkBox.checked = allCheckBox.checked;\n    }\n  },\n  recordCheckClick: function (checkBox, allCheckBox) {\n    if (checkBox.checked === false) {\n      $(allCheckBox).checked = false;\n      return;\n    }\n    var isAllCheck = true;\n    var checkBoxList = $("&" + this.id);\n    for (var i = 0; i < checkBoxList.length; i++) {\n      if (checkBoxList[i].checked === false) {\n        isAllCheck = false;\n      }\n    }\n    if (isAllCheck) {\n      $(allCheckBox).checked = true;\n    }\n  },\n  mustSelect: function (confirmMessage) {\n    var selectedId = [];\n    // var gridViewRowCount=this.getTable().rows.length;\n    var checkBoxList = $("&" + this.id);\n    var selectId = null;\n    for (var i = 0; i < checkBoxList.length; i += 1) {\n      var checkBox = checkBoxList[i];\n      if (checkBox.tagName.toLowerCase() === "input" && checkBox.checked) {\n        selectId = checkBox.id;\n        if (this.keyType === "string") {\n          selectedId.push("\'" + selectId + "\'");\n        } else {\n          selectedId.push(selectId);\n        }\n      }\n    }\n    if (selectedId.length === 0) {\n      if (lang.message.noSelectRecord) {\n        $.message(lang.message.noSelectRecord);\n      } else {\n        $.message("please define \'lang.message.noSelectRecord\'!");\n      }\n      return false;\n    }\n    if (selectedId.length === 1) {\n      selectedId.pop();\n      selectedId.push(selectId);\n    }\n    if (!confirmMessage) {\n      return selectedId;\n    }\n    if (window.confirm(confirmMessage)) {\n      return selectedId;\n    }\n    return false;\n  },\n  onlyCheckedOne: function (confirmMessage) {\n    var checkCount = 0;\n    var selectedId = null;\n    var checkBoxList = $("name." + this.id);\n    for (var i = 1; i < checkBoxList.length; i++) {\n      var checkBox = checkBoxList[i];\n      if (checkBox.checked) {\n        checkCount += 1;\n        selectedId = checkBox.id;\n      }\n    }\n    if (checkCount === 0) {\n      if (lang.message.noSelectRecord) {\n        $.message(lang.message.noSelectRecord);\n      } else {\n        $.message("please define lang.message.noSelectRecord!");\n      }\n      return false;\n    }\n    if (checkCount !== 1) {\n      if (lang.message.onlySelectOneRecord) {\n        $.message(lang.message.onlySelectOneRecord);\n      } else {\n        $.message("please define lang.message.onlySelectOneRecord");\n      }\n      return false;\n    }\n    if (window.confirm(confirmMessage)) {\n      return selectedId;\n    }\n    return true;\n  },\n  submit: function (postUrl, confirmMessage, isOnlyOne) {\n    var result = isOnlyOne ? this.onlyCheckedOne(confirmMessage) : this.mustSelect(confirmMessage);\n    if (!result) {\n      return;\n    }\n    $(this.resultCtrlId).value = result;\n    if (postUrl === "return") {\n      return true;\n    }\n    $.submit(postUrl);\n  }\n};\nSparrow.table = function (id) {\n  if (!(this instanceof Sparrow.table)) {\n    return new Sparrow.table(src);\n  }\n  // Event object\n  if (id) {\n    this.id = id;\n    this.t = $(id);\n    this.body = t.getElementsByTagName("tbody")[0];\n    this.tr = [];\n  }\n};\nSparrow.table.prototype = {\n  _initCell: function (cell, i, j) {\n    cell.style.cssText = this.tr[i].td[j].cssText;\n    cell.className = this.tr[i].td[j].className;\n    cell.align = this.tr[i].td[j].align;\n    cell.innerHTML = this.tr[i].td[j].innerHTML;\n    if (this.tr[i].td[j].colspan) {\n      cell.setAttribute("colspan", this.tr[i].td[j].colspan);\n    }\n  },\n  _initRow: function (row, i) {\n    row.style.cssText = table.tr[i].cssText;\n    if (table.tr[i].className && table.tr[i].className !== "") {\n      row.className = table.tr[i].className;\n    }\n    for (var j = 0; j < this.tr[i].td.length; j++) {\n      var cell = row.insertCell(-1);\n      this._initCell(cell, i, j);\n    }\n  },\n  init: function () {\n    for (var i = 0; i < this.tr.length; i++) {\n      this.body.appendChild(this._initRow(i));\n    }\n    $(this.containerId).appendChild(this.t);\n  },\n  appendRow: function () {\n    for (var i = 0; i < this.tr.length; i++) {\n      var row = this.body.insertRow(-1);\n      this._initRow(row, i);\n    }\n  },\n  insertRow: function (rowIndex) {\n    for (var i = 0; i < this.tr.length; i++) {\n      var row = this.body.insertRow(rowIndex);\n      this._initRow(row, i);\n    }\n  },\n  updateRow: function (rowIndex) {\n    for (var i = 0; i < this.tr[0].td.length; i++) {\n      if (this.tr[0].td[i].innerHTML) {\n        this.body.rows[rowIndex].cells[i].innerHTML = this.tr[0].td[i].innerHTML;\n      }\n    }\n  },\n  removeRow: function (rowIndex) {\n    this.body.deleteRow(rowIndex);\n  }\n};\n//document.domain=$.browser.cookie.root_domain; 解决跨域\nSparrow.file = {\n  // 是否显示上传进度\n  isShowProgress: true,\n  // 等待\n  wit: null,\n  // 客户端文件名\n  clientFileName: null,\n  // 上传框架id editorId.path-key 非editor id为null e.g null.forum 表示path-key为forum 的无editor 上传组件\n  uploadFrameId: null,\n  // 上传回调函数\n  uploadCallBack: function (fileInfo, editor, size) {\n    console.info(fileInfo);\n    console.info(size);\n    this.clearStatus();\n  },\n  // 如果图片很小，不会通过getStatus方法，则在回调时主动清除上传状态\n  clearStatus: function () {\n    window.clearInterval(this.wit);\n    window.setTimeout(function () {\n      var divStatus = $(\'divStatus\');\n      if ($.file.isShowProgress && divStatus != null) {\n        document.body.removeChild(divStatus);\n      }\n    }, 1000);\n  },\n  // 文件序列号\n  fileSerialNumber: null,\n  // 文件上传前的验证方法由 input file 的onchange响应\n  // file控件的onchange方法\n  // file.uploadDelegate(this,pathKey);\n  // upload frame的id与editorId_pathKey要保持一致\n  // path key 对应后台配置的上传策略\n  validateUploadFile: function (f, key, editor) {\n    if ($.file.checkFileType($.file.getFileName(f.value), ["jpg", "jpeg", "gif", "png"], "errorImgForumIco")) {\n      $.file.uploadDelegate(key, editor);\n    }\n  },\n  callbackValidate: function (uploadProgress) {\n    if ($.isNullOrEmpty(uploadProgress.error)) {\n      return true;\n    }\n    $.alert(uploadProgress.error, "sad");\n    $.file.clearStatus();\n    return false;\n  },\n  // 文件上传成功后的重置方法\n  // 因为文件上传完毕之后需要重置上传序列号。所以一定要手动设置该方法\n  reset: function () {\n    var uploadFrame = $(this.uploadFrameId);\n    var tempSrc = uploadFrame.src;\n    uploadFrame.src = "about:blank";\n    uploadFrame.src = tempSrc;\n  },\n  getUploadFrame: function () {\n    return this.uploadFrameId ? $(this.uploadFrameId) : $("fileUpload");\n  },\n  // 获取上传的input type="file"控件\n  getUploadFile: function (frame) {\n    if (!frame) {\n      frame = this.getUploadFrame();\n    }\n    return frame.contentWindow.document.getElementById("file_upload");\n  },\n  getUploadFileInfo: function (frame) {\n    if (!frame) {\n      frame = this.getUploadFrame();\n    }\n    return frame.contentWindow.document.getElementById("fileInfo");\n  },\n  // 获取文件序列号\n  getFileSerialNumber: function () {\n    return this.fileSerialNumber;\n  },\n  setFileSerialNumber: function (serialNumber) {\n    this.fileSerialNumber = serialNumber;\n  },\n  // 获取文件的全路径文件名?\n  getFullPath: function (obj) {\n    if (!obj) {\n      return "";\n    }\n    if ($.browser.ie) {\n      obj.select();\n      var txt = document.frames[0].document.selection.createRange().text;\n      document.frames[0].document.selection.empty();\n      return txt;\n    }\n    if ($.browser.firefox) {\n      if (obj.files) {\n        return obj.files.item(0).getAsDataURL();\n      }\n      return obj.value;\n    }\n    return obj.value;\n  },\n  // 获文件扩展名\n  getExtension: function (fileName) {\n    fileName = $.browser.getUrlWithoutParameter(fileName);\n    return fileName.substring(fileName.lastIndexOf(".")).toLocaleLowerCase();\n  },\n  // 获取文件名\n  getFileName: function (fileName) {\n    fileName = $.browser.getUrlWithoutParameter(fileName);\n    if (fileName.indexOf("\\\\") !== -1) {\n      return fileName.substring(fileName.lastIndexOf("\\\\") + 1);\n    }\n    if (fileName.indexOf(\'/\') !== -1) {\n      return fileName.substring(fileName.lastIndexOf("/") + 1);\n    }\n    return fileName;\n  },\n  // 验证文件类型\n  checkFileType: function (fileName, rightExtension, errorCtrl) {\n    //这里封装跨域可以复用，因为\n    var fileExtension = this.getExtension(fileName);\n    var result = false;\n    for (var i = 0; i < rightExtension.length; i += 1) {\n      if (rightExtension[i].toLocaleLowerCase() === fileExtension || \'.\' + rightExtension[i].toLocaleLowerCase() === fileExtension) {\n        result = true;\n        break;\n      }\n    }\n    if (result) {\n      $.v.ok(errorCtrl);\n      return result;\n    }\n    var errorLabel = $("#" + errorCtrl);\n    if (errorLabel != null && errorLabel.source() != null) {\n      errorLabel.class("error");\n      errorLabel.html("!只支持:" + rightExtension + "格式");\n    }\n    $.message("文件格式不正确，只支持以下格式:\\n" + rightExtension);\n    return result;\n  },\n  // 如果editor为null则表示非编辑器控件\n  uploadDelegate: function (key, editor, srcElement) {\n    // 如果显示状态并且状态控件已经显示则说明已经有文件正在上传中...\n    if (this.isShowProgress !== false && $("divStatus")) {\n      $.alert(this.clientFileName + "正在上传中,请稍侯...", "sad");\n      return false;\n    }\n    this.uploadFrameId = (editor ? editor.obj : "null") + "." + key;\n    var uploadFrame = this.getUploadFrame();\n    // 客户端文件名\n    this.clientFileName = this.getUploadFile(uploadFrame).value;\n    // 如果没有选择上传文件\n    if (this.clientFileName === "") {\n      $.message("请选择上传文件!", srcElement);\n      return false;\n    }\n    var fileInfo = this.getUploadFileInfo(uploadFrame).value;\n    var fileInfoArray = fileInfo.split(".");\n    // 设置当前文件的序列号\n    this.setFileSerialNumber(fileInfoArray[2]);\n    // 如果要显示状态\n    if ($.file.isShowProgress !== false) {\n      // 如果状态控件不存在则创建\n      if (!$("divStatus")) {\n        var sparrowUploadFrame = $(uploadFrame);\n        var divStatus = $("+div");\n        divStatus.s.id = "divStatus";\n        divStatus.s.style.cssText = "width:260px;height:100px;position:absolute;color:#ffffff;background:#000000;font-size:10pt;border:#ccc 1px solid;text-align:left;";\n        divStatus.html("服务器正在加载文件信息...");\n        document.body.appendChild(divStatus.s);\n        divStatus.s.style.top = sparrowUploadFrame.getAbsoluteTop() - 10 + "px";\n        divStatus.s.style.left = sparrowUploadFrame.getAbsoluteLeft() + "px";\n        divStatus.opacity(90);\n      }\n      // 设置状态跟踪\n      if (typeof editor === "undefined" || editor === null) {\n        // 非编辑器控件\n        this.wit = window.setInterval(function () {\n          $.file.getStatus();\n        }, 1000);\n      } else {\n        this.wit = window.setInterval(function () {\n          $.file.getStatus();\n        }, 1000);\n      }\n    }\n    // 提交\n    uploadFrame.contentWindow.document.forms[0].submit();\n  },\n  //只负责显示进度\n  progressCallback: function (uploadProgress) {\n    if (uploadProgress == null) {\n      return;\n    }\n    if (uploadProgress.status === "loading") {\n      return;\n    }\n    if (!this.callbackValidate(uploadProgress)) {\n      return;\n    }\n    // 正常显示状态\n    var statusString = [];\n    var status = Math.ceil(parseFloat(uploadProgress.readLength) / parseFloat(uploadProgress.contentLength) * 1000000) / 10000 + "%";\n    statusString.push("正在上传文件<br/><span class=\'highlight\'>《" + $.file.getFileName($.file.clientFileName) + "》</span><br/>");\n    statusString.push("文件大小:" + uploadProgress.humanReadableContentLength + "<br/>");\n    statusString.push("上传大小:" + uploadProgress.humanReadableReadLength + "<br/>");\n    statusString.push("上传进度:" + status);\n    $("#divStatus", false).html(statusString.toString());\n    if (status === "100%") {\n      $.file.clearStatus();\n    }\n  },\n  getStatus: function () {\n    // 根据当前文件的序列号,实时获取当前文件的上传状态\n    $("jsonp", $.url.upload + "/file-upload?file-serial-number=" + this.getFileSerialNumber() + "&t=" + Math.random() + "&callback=progressCallback", "uploadProgress");\n  },\n  /**\n   * @param key path-key\n   * @param pathKeySuffixPair {path-key:suffix}\n   */\n  initImageUploadEvent: function (key, pathKeySuffixPair) {\n    if (!$.url.upload) {\n      console.error("please config $.url.upload the default config is $.url.root [" + $.url.root + "]");\n      $.url.upload = $.url.root;\n    }\n    var fileFrame = $("null." + key);\n    if (fileFrame == null) {\n      return;\n    }\n    document.domain = $.browser.cookie.root_domain;\n    if (!pathKeySuffixPair) pathKeySuffixPair = "Cover";\n    fileFrame.src = $.url.upload + "/file-upload?path-key=" + key + "&t=" + Math.random();\n    //第一次加载初始化\n    $.file.uploadCallBack = function (fileInfo, editor, size) {\n      console.info(size);\n    };\n    $.file.validateUploadFile = function (f, key, editor) {\n      var suffix = pathKeySuffixPair;\n      if (typeof pathKeySuffixPair === "object") {\n        suffix = pathKeySuffixPair[key];\n      }\n      if (!$.file.checkFileType($.file.getFileName(f.value), ["jpg", "jpeg", "gif", "png"], "error" + suffix)) {\n        return;\n      }\n      $.file.uploadCallBack = function (uploadingProgress) {\n        $.file.clearStatus();\n        if (!uploadingProgress.fileUrl) {\n          return;\n        }\n        var divContainer = $("#div" + suffix);\n        if (divContainer != null) {\n          divContainer.html("<a href=\'" + uploadingProgress.fileUrl + "\' target=\'_blank\'><img src=\'" + uploadingProgress.fileUrl + "\'/></a>");\n        }\n        var hdnWebUrl = $("#hdn" + suffix);\n        if (hdnWebUrl != null) {\n          hdnWebUrl.value(uploadingProgress.fileUrl);\n        }\n        var errorPrompt = $("#error" + suffix);\n        if (errorPrompt != null && errorPrompt.s != null) {\n          errorPrompt.class("prompt");\n          errorPrompt.html("");\n        }\n      };\n      $.file.uploadDelegate(key, editor);\n    };\n  }\n};\nSparrow.event = function (e) {\n  if (!(this instanceof Sparrow.event)) {\n    return new Sparrow.event(e);\n  }\n  if (e) {\n    this.originalEvent = e;\n    this.type = e.type;\n    this.e = window.event || this.originalEvent;\n    this.srcElement = this.e.srcElement || this.e.target;\n    this.toElement = this.e.toElement || this.e.relatedTarget;\n  }\n};\nSparrow.event.prototype = {\n  dragapproved: false,\n  srcElement: null,\n  eventX: null,\n  eventY: null,\n  srcLeftPos: null,\n  srcRightPos: null,\n  cancelBubble: function () {\n    window.event ? window.event.cancelBubble = true : this.e.stopPropagation();\n  },\n  preventDefault: function () {\n    if (this.e.preventDefault) {\n      this.e.preventDefault();\n    }\n    if (window.event) window.event.returnValue = false;\n  },\n  getAbsoluteTop: function () {\n    return this.e.pageY ? this.e.pageY : this.e.clientY ? this.e.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) : null;\n  },\n  getAbsoluteLeft: function () {\n    return this.e.pageX ? this.e.pageX : this.e.clientX ? this.e.clientX + (document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft) : null;\n  },\n  move: function () {\n    if (this.dragapproved && this.srcElement != null) {\n      this.srcElement.style.left = this.srcLeftPos + this.clientX - this.eventX;\n      this.srcElement.style.top = this.srcRightPos + this.clientY - this.eventY;\n      return;\n    }\n    return true;\n  },\n  move_end: function () {\n    this.dragapproved = false;\n    this.srcElement.onmousemove = null;\n  },\n  drags: function () {\n    try {\n      if (this.srcElement.className.indexOf("drag") !== -1) {\n        if (this.srcElement.className === "drag-p") {\n          this.srcElement = this.srcElement.parentNode;\n        } else if (this.srcElement.className === "drag-pp") {\n          this.srcElement = this.srcElement.parentNode.parentNode;\n        } else {\n          this.srcElement = null;\n        }\n        var sparrowElement = $(this.srcElement);\n        this.dragapproved = true;\n        this.srcLeftPos = sparrowElement.getAbsoluteLeft();\n        this.srcRightPos = sparrowElement.getAbsoluteTop();\n        this.eventX = e.clientX;\n        this.eventY = e.clientY;\n        this.srcElement.onmousemove = this.move;\n      } else {\n        this.srcElement = null;\n        this.dragapproved = false;\n        this.srcElement.onmousemove = null;\n      }\n    } catch (err) {}\n  }\n};\nSparrow.prototype.progressbar = function (callback, config) {\n  var bar = $("+div");\n  document.body.appendChild(bar.s);\n  if (config.style) {\n    bar.s.style.cssText = config.style;\n  }\n  var progress = $("+div");\n  bar.s.appendChild(progress.s);\n  if (config.progressStyle) {\n    progress.s.style.cssText = config.progressStyle;\n  }\n  progress.s.style.width = "0px";\n  progress.it = window.setInterval(function () {\n    callback(progress);\n  }, 100);\n  progress.end = function () {\n    window.clearInterval(progress.it);\n  };\n  progress.remove = function () {\n    document.body.removeChild(progress.s.parentNode);\n  };\n};\nSparrow.treeNode = function (id, pid, name, url, title, target, childCount, showCtrl, businessEntity, icon) {\n  this.id = id;\n  this.pid = pid;\n  this.name = name;\n  this.url = url;\n  this.title = title;\n  this.target = target;\n  this.showCtrl = showCtrl ? showCtrl : true;\n  this.businessEntity = businessEntity;\n  this.childCount = childCount ? childCount : 0;\n  this.icon = icon;\n  this.iconOpen = icon;\n  this._isOpened = false;\n  this._isSelected = false;\n  this._lastOfSameLevel = false;\n  this._addressIndex = 0;\n  this._parentNode;\n  //延迟加载时，由后台提供\n  this._hasChild = childCount > 0;\n};\nSparrow.tree = function (objName, parentName) {\n  this.config = {\n    target: "_self",\n    useFolderLinks: true,\n    //是否显示文件夹\n    useSelection: true,\n    //是否支持选中\n    useCookies: true,\n    //是否支持cookie 记忆\n    useLines: true,\n    //是否使用链接线\n    useIcons: true,\n    //是否使用icon 图标\n    useRootIcon: true,\n    //是否显示root 图标\n    usePlusMinusIcons: true,\n    //是否使用+-号图标\n    //class name 包含tree-id\n    useTreeIdInNodeClass: false,\n    useLevelInNodeClass: false,\n    useRadio: false,\n    useCheckbox: false,\n    //是否显示复选框\n    treeNodeClass: null,\n    //节点class\n    //根据旧权构建\n    reBuildTree: null,\n    //是否支持旧树重建\n    //重新查库构建\n    loadFloatTree: null,\n    //是否支持浮动树构建\n    floatTreeId: null,\n    //浮动树id\n    descHiddenId: null,\n    //选中后ID显示对象\n    descTextBoxId: null,\n    //选中后文本显示对象\n    validate: null,\n    //自定义验证事件\n    validateConfig: null,\n    //自定义验证config\n    isdelay: false,\n    isclientDelay: false,\n    closeSameLevel: false,\n    //自动关闭同级节点\n    inOrder: false,\n    //\n    showRootIco: true,\n    //是否显示根icon\n    showOrder: false,\n    //是否显示排序\n    orderURL: null,\n    //排序url\n    treeFrameId: null,\n    //树显示的div\n    loadingString: "londing .....",\n    imageDir: $.url.resource + "/images/treeimg",\n    // prompt:"1系统菜单 2系统页面 3控件"\n    RESOURCE_TYPE: {\n      "1": "[系统菜单]",\n      "2": "[系统页面]",\n      "3": "[控件事件]"\n    }\n  };\n  this.icon = {\n    root: this.config.imageDir + \'/base.gif\',\n    folder: this.config.imageDir + \'/folder.gif\',\n    folderOpen: this.config.imageDir + \'/folderopen.gif\',\n    node: this.config.imageDir + \'/page.gif\',\n    nolineNode: this.config.imageDir + \'/nolinepage.gif\',\n    empty: this.config.imageDir + \'/empty.gif\',\n    line: this.config.imageDir + \'/line.gif\',\n    join: this.config.imageDir + \'/join.gif\',\n    joinBottom: this.config.imageDir + \'/joinbottom.gif\',\n    plus: this.config.imageDir + \'/plus.gif\',\n    plusBottom: this.config.imageDir + \'/plusbottom.gif\',\n    minus: this.config.imageDir + \'/minus.gif\',\n    minusBottom: this.config.imageDir + \'/minusbottom.gif\',\n    nlPlus: this.config.imageDir + \'/nolines_plus.gif\',\n    nlMinus: this.config.imageDir + \'/nolines_minus.gif\'\n  };\n  this.interval = null;\n  this.currentSelectId = {};\n  this.floatTreeFrameId = null; // read only\n  this.obj = objName;\n  this.parentName = parentName;\n  this.fullObjName = parentName ? parentName + "." + objName : objName;\n  this.aNodes = [];\n  this.aIndent = [];\n  this.root = new Sparrow.treeNode(-1);\n  this.selectedNodeIndex = null;\n  this.selectedFound = false;\n  this.completed = false;\n};\nSparrow.tree.prototype = {\n  resetIcon: function () {\n    this.icon.root = this.config.imageDir + \'/base.gif\';\n    this.icon.nolineroot = this.config.imageDir + \'/nolinebase.gif\';\n    this.icon.folder = this.config.imageDir + \'/folder.gif\';\n    this.icon.folderOpen = this.config.imageDir + \'/folderopen.gif\';\n    this.icon.node = this.config.imageDir + \'/page.gif\';\n    this.icon.nolineNode = this.config.imageDir + \'/nolinepage.gif\';\n    this.icon.empty = this.config.imageDir + \'/empty.gif\';\n    this.icon.line = this.config.imageDir + \'/line.gif\';\n    this.icon.join = this.config.imageDir + \'/join.gif\';\n    this.icon.joinBottom = this.config.imageDir + \'/joinbottom.gif\';\n    this.icon.plus = this.config.imageDir + \'/plus.gif\';\n    this.icon.plusBottom = this.config.imageDir + \'/plusbottom.gif\';\n    this.icon.minus = this.config.imageDir + \'/minus.gif\';\n    this.icon.minusBottom = this.config.imageDir + \'/minusbottom.gif\';\n    this.icon.nlPlus = this.config.imageDir + \'/nolines_plus.gif\';\n    this.icon.nlMinus = this.config.imageDir + \'/nolines_minus.gif\';\n  },\n  addBusinessEntity: function (id, pid, name, url, title, businessEntity) {\n    this.aNodes[this.aNodes.length] = new Sparrow.treeNode(id, pid, name, url, title, "_self", undefined, true, businessEntity);\n  },\n  add: function (id, pid, name, url, title, target, childCount, showCtrl, businessEntity, icon) {\n    this.aNodes[this.aNodes.length] = new Sparrow.treeNode(id, pid, name, url, title, target, childCount, showCtrl, businessEntity, icon);\n  },\n  openAll: function () {\n    this.oAll(true);\n  },\n  closeAll: function () {\n    this.oAll(false);\n  },\n  toString: function () {\n    var str = \'<div class="sparrow-tree">\';\n    if (document.getElementById) {\n      if (this.config.useCookies) {\n        this.selectedNodeIndex = this.getSelectedAi();\n      }\n      str += this.addNode(this.root);\n    } else {\n      str += \'Browser not supported.</div>\';\n    }\n    if (!this.selectedFound) {\n      this.selectedNodeIndex = null;\n    }\n    this.completed = true;\n    return str;\n  },\n  deleteClick: function () {\n    alert(\'deleteClick not defined!\');\n  },\n  removeNode: function (currentNode) {\n    if (!currentNode) {\n      currentNode = this.aNodes[this.getSelectedAi()];\n    }\n    this.aNodes.splice(currentNode._addressIndex, 1);\n    this.clearSelectedNode();\n    $(this.config.treeFrameId).innerHTML = this.toString();\n    this.clearFloatFrame();\n  },\n  appendNode: function (newNode) {\n    this.aNodes.push(newNode);\n    $(this.config.treeFrameId).innerHTML = this.toString();\n  },\n  updateNode: function (newNode, currentNode) {\n    if (!currentNode) {\n      currentNode = this.aNodes[this.getSelectedAi()];\n    }\n    if (currentNode.pid !== newNode.pid) {\n      this.removeNode(currentNode);\n      this.appendNode(newNode);\n    } else {\n      this.aNodes[this.getSelectedAi()] = newNode;\n    }\n    $(this.config.treeFrameId).innerHTML = this.toString();\n  },\n  showOrder: function (e) {\n    if (!this.config.showOrder) {\n      return;\n    }\n    var orderDiv = $("orderDiv");\n    if (orderDiv) {\n      document.body.removeChild(orderDiv);\n    }\n    var srcObject = $.event(e).srcElement;\n    //remove old label,because it\'s in container cache !!important\n    //$.remove("#"+srcObject.id);\n    var sparrowElement = $(srcObject, false);\n    var addressIndex = srcObject.id.substring(this.obj.length + 1);\n    var currentNode = this.aNodes[addressIndex];\n    if (currentNode.pid === -1) {\n      this.clearFloatFrame();\n      return;\n    }\n    orderDiv = $("+div.orderDiv");\n    document.body.appendChild(orderDiv.s);\n    orderDiv.class("pure-menu pure-order-menu");\n    orderDiv.css("position", "absolute");\n    orderDiv.html((\'<span class="pure-menu-heading pure-menu-link pure-order-menu-heading" onclick="{0}.delete_click({1});{0}.clearFloatFrame();" >删除</span>\' + \'<ul class="pure-menu-list">\' + \'<li class="pure-menu-item"><a href="#" class="pure-menu-link">当前第<span id="currentOrderNo"></span>位</a></li>\' + \'<li class="pure-menu-item pure-menu-has-children">\' + \'<a  id="hyperJump" class="pure-menu-link">你可以跳转至</a>\' + \' <ul id="ulChildrenList" class="pure-menu-children"></ul></li></ul>\').format(this.fullObjName, addressIndex));\n    orderDiv.bind("onclick", function (e) {\n      $.event(e).cancelBubble();\n    });\n    $("#hyperJump", false).bind("onmouseover", function () {\n      $("#ulChildrenList", false).css("display", "block");\n    });\n    orderDiv.css("left", sparrowElement.getAbsoluteLeft() + srcObject.offsetWidth + "px");\n    orderDiv.css("top", sparrowElement.getAbsoluteTop() + srcObject.offsetHeight + "px");\n    var pNode = currentNode._parentNode;\n    var index = 0;\n    var currentIndex = 0;\n    var listHTML = "";\n    for (var i = 0; i < this.aNodes.length; i++) {\n      if (this.aNodes[i].pid !== pNode.id) {\n        continue;\n      }\n      if (this.aNodes[i].id === currentNode.id) {\n        currentIndex = ++index;\n        continue;\n      }\n      index++;\n      listHTML += \'<li class="pure-menu-item" onclick="{0}.order({1},{2})"><a href="#" class="pure-menu-link">第<span>{2}</span>位</a></li>\'.format(this.fullObjName, addressIndex, index);\n      if (this.aNodes[i]._lastOfSameLevel) {\n        break;\n      }\n    }\n    //without cache\n    $("#ulChildrenList", false).html(listHTML);\n    $("#currentOrderNo", false).html(currentIndex);\n  },\n  order: function (srcAddressIndex, sort) {\n    var srcNode = this.aNodes[srcAddressIndex];\n    var data = "id=" + srcNode.id + "&target=" + sort;\n    var tree = this;\n    var nodes = this.aNodes;\n    $.ajax.json(this.config.orderURL, data, function (json) {\n      srcNode = nodes[srcAddressIndex];\n      var destNode = null;\n      var srcParentNode = srcNode._parentNode;\n      var childNo = 0;\n      var destIndex = 0;\n      //find dest node\n      for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].pid !== srcParentNode.id) {\n          continue;\n        }\n        childNo++;\n        if (childNo === sort) {\n          destIndex = i;\n          destNode = nodes[i];\n          break;\n        }\n      }\n      //delete src index\n      nodes.splice(srcAddressIndex, 1);\n      //insert new at dest insert\n      nodes.splice(destIndex, 0, srcNode);\n      $("#" + tree.config.treeFrameId).html(tree);\n      tree.clearFloatFrame();\n    });\n  },\n  addNode: function (pNode) {\n    var str = \'\';\n    var n = 0;\n    //如果数据有序，则不需要从头遍历\n    if (this.config.inOrder) {\n      n = pNode._addressIndex;\n    }\n    for (n; n < this.aNodes.length; n++) {\n      var cn = this.aNodes[n];\n      if (!cn || cn.pid !== pNode.id) {\n        continue;\n      }\n      cn._parentNode = pNode;\n      pNode.childCount++;\n      cn._addressIndex = n;\n      this.setCS(cn);\n      if (!cn.target && this.config.target) {\n        cn.target = this.config.target;\n      }\n      if (cn._hasChild && !cn._io && this.config.useCookies) {\n        cn._isOpened = this.isOpen(cn.id);\n      }\n      if (!this.config.useFolderLinks && cn._hasChild) {\n        cn.url = null;\n      }\n      if (this.config.useSelection && cn.id === this.getSelectedId()) {\n        cn._isSelected = true;\n        this.selectedNodeIndex = n;\n        this.selectedFound = true;\n      }\n      // 因node中调用addNode()函数则为递归。\n      if (this.config.showRootIco) {\n        str += this.node(cn, n);\n      } else {\n        this.node(cn, n);\n      }\n      // 如果当前节点是当前父节点的最后一个儿子节点则退出遁环\n      if (cn._lastOfSameLevel) break;\n    }\n    return str;\n  },\n  select: function (srcElement, className) {\n    if (this.current != null) {\n      this.current.className = $(this.current).attr("old");\n    }\n    $(srcElement).attr("old", srcElement.className);\n    srcElement.className = "iTreeNodeSelect" + className;\n    this.current = srcElement;\n  },\n  node: function (node, nodeId) {\n    // 获得缩进字符串\n    var classNum = "";\n    if (this.config.treeNodeClass) {\n      classNum += this.config.treeNodeClass;\n    } else if (this.config.useTreeIdInNodeClass) {\n      classNum += this.obj.substring(0, 1).toUpperCase() + this.obj.substring(1);\n    }\n    if (this.config.useLevelInNodeClass) {\n      classNum += this.aIndent.length > 1 ? 3 : this.aIndent.length + 1;\n    }\n    var str = \'<div onclick="\' + this.fullObjName + \'.select(this,\\\'\' + classNum + \'\\\');"\';\n    if (this.config.useRootIcon || node.pid !== this.root.id) {\n      str += \' class="iTreeNode\' + classNum + \'"\';\n    }\n    str += \'id="node\' + this.obj + nodeId + \'"  >\' + this.indent(node, nodeId);\n    if (this.config.useIcons) {\n      if (this.config.useLines) {\n        node.icon = this.root.id === node.pid ? this.icon.root : node._hasChild ? this.icon.folder : this.icon.node;\n        node.iconOpen = this.root.id === node.pid ? this.icon.root : node._hasChild ? this.icon.folderOpen : this.icon.node;\n      } else if (!node.icon) {\n        node.iconOpen = node.icon = node._hasChild ? this.icon.nolinefolder : this.icon.nolinenode;\n      }\n      if (this.config.useRootIcon || node.pid !== this.root.id) {\n        str += \'<img \' + (this.config.showOrder ? \' onmouseover="\' + this.fullObjName + \'.showOrder(event)"\' : \'\') + \' id="i\' + this.obj + nodeId + \'" src="\' + (node._isOpened ? node.iconOpen : node.icon) + \'" alt="" align="absMiddle"/>\';\n      }\n      if (node.showCtrl && node.pid !== -1 || node.pid === -1 && this.userRootIcon === true) {\n        if (this.config.useRadio) {\n          str += \'<input style="line-height:15px;height:15px;border:0;" type="radio" name="iTreerdb" id="r{1}{0}" onclick="{1}.getRadioSelected({0});{1}.s({0});" value="{2}"/>\'.format(nodeId, this.fullObjName, node.id);\n        }\n        if (this.config.useCheckbox === true) {\n          str += \'<input style="line-height:15px;height:15px;border:0;" type="checkbox" name="iTreecbx" id="c{1}{0}" onclick="{1}.selectCheckbox({0});" value="{2}"/>\'.format(nodeId, this.fullObjName, node.id);\n        }\n      }\n    }\n    if (node.url) {\n      str += \'<a ondblclick="javascript:\' + this.fullObjName + \'.dbs(\' + nodeId + \');" id="s\' + this.obj + nodeId + \'" class="\' + (this.config.useSelection ? node._isSelected ? \'nodeSel\' : \'node\' : \'node\') + \'" href="\' + node.url + \'"\';\n      if (node.title) {\n        str += \' title="\' + node.title + \'"\';\n      }\n      if (node.target) {\n        str += \' target="\' + node.target + \'"\';\n      }\n      if (this.config.useSelection && (node._hasChild && this.config.useFolderLinks || !node._hasChild)) {\n        str += \' onclick="javascript: \' + this.fullObjName + \'.s(\' + nodeId + \');\';\n      }\n      str += (this.config.usePlusMinusIcons ? \'\' : node._hasChild && node._parentNode.id !== -1 ? this.fullObjName + \'.o(\' + nodeId + \')\' : \'\') + \'">\';\n    } else if ((!this.config.useFolderLinks || !node.url) && node._hasChild && node.pid !== this.root.id) {\n      str += \'<a href="javascript: \' + this.fullObjName + \'.o(\' + nodeId + \');" class="node">\';\n    }\n    str += \'<span id="ntext\' + this.obj + nodeId + \'">\' + node.name + \'</span>\';\n    if (node.url || (!this.config.useFolderLinks || !node.url) && node._hasChild) {\n      str += \'</a>\';\n    }\n    str += \'</div>\';\n    if (node._hasChild) {\n      str += \'<div id="d\' + this.obj + nodeId + \'" class="clip" style="display:\' + (this.root.id === node.pid || node._isOpened ? \'block\' : \'none\') + \';">\';\n      // 如果不是动态加载\n      if (!this.config.isdelay && !this.config.isclientDelay) {\n        str += this.addNode(node);\n      }\n      // 延迟加载子节点(前一条件针对打开的所有非顶级节点，后一条件针对根节点)\n      // 是否打开在缓存中取\n      else if (node._isOpened && node.pid != -1 || node.pid == -1) {\n        str += this.addNode(node);\n      }\n      str += \'</div>\';\n    }\n    this.aIndent.pop();\n    return str;\n  },\n  // 生成缩进图片\n  indent: function (node, nodeId) {\n    var str = \'\';\n    if (this.root.id === node.pid) {\n      return str;\n    }\n    for (var n = 0; n < this.aIndent.length; n++) {\n      str += \'<img src="\' + (this.aIndent[n] === 1 && this.config.useLines ? this.icon.line : this.icon.empty) + \'" alt="" />\';\n    }\n    // 因为是递归填加节点，所以用堆栈。先将节点的缩进状态压入栈，等节点填加完成后再弹出栈。\n    // 所以当树的层次为多层时，栈中也同样有相同层次的状态信息。如果为是普通节点则画|如果是同父节点的最小兄弟节点则画空格\n    node._lastOfSameLevel ? this.aIndent.push(0) : this.aIndent.push(1);\n    if (!this.config.usePlusMinusIcons) {\n      str += \'<img style="width:0;height:0;" id="j\' + this.obj + nodeId + \'"/>\';\n      return str;\n    }\n    if (node._hasChild) {\n      str += \'<a href="javascript: \' + this.fullObjName + \'.o(\' + nodeId + \');"><img id="j\' + this.obj + nodeId + \'" src="\';\n      if (!this.config.useLines) {\n        str += node._isOpened ? this.icon.nlMinus : this.icon.nlPlus;\n      } else {\n        str += node._isOpened ? node._lastOfSameLevel && this.config.useLines ? this.icon.minusBottom : this.icon.minus : node._lastOfSameLevel && this.config.useLines ? this.icon.plusBottom : this.icon.plus;\n      }\n      str += \'"/></a>\';\n      return str;\n    }\n    str += \'<img id="j\' + this.obj + nodeId + \'" src="\' + (this.config.useLines ? node._lastOfSameLevel ? this.icon.joinBottom : this.icon.join : this.icon.empty) + \'" alt="" />\';\n    return str;\n  },\n  // 设置当前节点状态_hc和ls\n  setCS: function (node) {\n    var lastId = null;\n    node._hasChild = false;\n    node._lastOfSameLevel = false;\n    for (var n = 0; n < this.aNodes.length; n++) {\n      // 如果不是动态的则判断是否有子节点,如果是延迟加载由后台提供s\n      if (this.config.isdelay === false) {\n        if (this.aNodes[n] != null && this.aNodes[n].pid == node.id) {\n          node._hasChild = true;\n        }\n      }\n      if (this.aNodes[n] != null && this.aNodes[n].pid == node.pid) lastId = this.aNodes[n].id;\n    }\n    if (lastId === node.id) {\n      node._lastOfSameLevel = true;\n    }\n  },\n  getAllNameOfNode: function (cn, splitChar) {\n    if (!cn) {\n      cn = this.aNodes[this.getSelectedAi()];\n    }\n    var nameArray = [];\n    while (cn.id !== -1 && !$.isNullOrEmpty(cn.name)) {\n      if (cn.name.indexOf(\':\') !== -1) {\n        nameArray.push(cn.name.split(\':\')[1]);\n      } else {\n        nameArray.push(cn.name);\n      }\n      if (cn._parentNode) {\n        cn = cn._parentNode; // 如果cn_p存在，即是静加载因为是动态加载只有addNode后才有该节点信息\n      } else {\n        cn = this.aNodes[this.getAiById(cn.pid)];\n      }\n    }\n    splitChar = splitChar ? splitChar : "  ";\n    nameArray.reverse();\n    return nameArray.join(splitChar);\n  },\n  // 获取当前选中的节点地址索引只有一个\n  getSelectedAi: function () {\n    return this.getAiById(this.getSelectedId());\n  },\n  // 获取当前选中的节点ID只有一个\n  getSelectedId: function () {\n    var sn;\n    if (this.config.useCookies === true) {\n      sn = this.getCookie(\'currentSelect\' + this.obj);\n    } else {\n      sn = this.currentSelectId["currentSelect" + this.obj];\n    }\n    return sn ? sn : null;\n  },\n  // 清除当前选中节点\n  clearSelectedNode: function () {\n    var now = new Date();\n    var yesterday = new Date(now.getTime() - 1000 * 60 * 60 * 24);\n    this.setCookie(\'cs\' + this.obj, \'cookieValue\', yesterday);\n    this.currentSelectId["currentSelect" + this.obj] = null;\n  },\n  // 设置当前选中的节点\n  setCurrentSelectNode: function (cn) {\n    if (this.config.useCookies) {\n      this.setCookie(\'currentSelect\' + this.obj, cn.id);\n    } else {\n      this.currentSelectId["currentSelect" + this.obj] = cn.id;\n    }\n  },\n  // 选择事件\n  s: function (id) {\n    if (!this.config.useSelection) {\n      return;\n    }\n    var cn = this.aNodes[id];\n    if (cn._hasChild && !this.config.useFolderLinks) {\n      return;\n    }\n    if (this.selectedNodeIndex !== id) {\n      if (this.selectedNodeIndex || this.selectedNodeIndex === 0) {\n        // 将之前的选中节点置为普通结点状态\n        eOld = document.getElementById("s" + this.obj + this.selectedNodeIndex);\n        this.aNodes[this.selectedNodeIndex]._isSelected = false;\n        if (eOld) {\n          eOld.className = "node";\n        }\n      }\n      eNew = document.getElementById("s" + this.obj + id);\n      eNew.className = "nodeSel";\n      this.selectedNodeIndex = id;\n      cn._isSelected = true;\n      this.setCurrentSelectNode(cn);\n    }\n    if (document.getElementById("r" + this.obj + id)) {\n      document.getElementById("r" + this.obj + id).checked = true;\n      this.getRadioSelected(id);\n    }\n    if (document.getElementById("c" + this.obj + id)) {\n      var currentcbk = document.getElementById("c" + this.obj + id);\n      currentcbk.checked = !currentcbk.checked;\n      this.selectCheckbox(id);\n    }\n    if (this.config.closeSameLevel) this.closeLevel(cn);\n  },\n  /**\n   * 把折叠状态节点的子节点加载到子节点面板中<br>\n   *\n   * @param node\n   *            节点对象;\n   */\n  delayOpen: function (node) {\n    var currentTree = this;\n    var cn = node;\n    var id = node._addressIndex;\n    // 延迟加载折叠状态节点的子节点\n    if (cn._isOpened) {\n      return true;\n    }\n    // 获取展示子节点的div\n    var childrenDIV = document.getElementById(\'d\' + this.obj + id);\n    // 该结点从未展开过\n    if (childrenDIV != null && childrenDIV.innerHTML == "") {\n      var postStr = "ay=true&nodeId=" + cn.id;\n      if ($("exceptid").value) {\n        postStr += "&exceptid=" + $("exceptid").value;\n      }\n      $.ajax.json(this.config.ajaxURL, postStr, function (result) {\n        alert(result);\n        // alert(xmlHttpRequest.responseText);\n        var nodeListJson = xmlHttpRequest.responseText.json();\n        openNodeCallBack(nodeListJson);\n        // 将从当前节点到次级根节点之前所有父节点是否是同级节点的最后一个的标志压栈\n        var nodeTemp = cn;\n        var indentArray = [];\n        // 循环到次级根节点之前\n        while (nodeTemp.pid != -1) {\n          indentArray[indentArray.length] = nodeTemp._lastOfSameLevel ? 0 : 1;\n          nodeTemp = nodeTemp._parentNode;\n        }\n        // 反向压栈\n        for (var i = indentArray.length - 1; i >= 0; i--) {\n          currentTree.aIndent.push(indentArray[i]);\n        }\n        // 初始化下下级所有结点，并得到所有下一级子节点的html字符串，并将一层孩子写入到页面中\n        childrenDIV.innerHTML = currentTree.addNode(cn);\n        // 清除临时深度\n        for (var i = 0; i < indentArray.length; i++) {\n          currentTree.aIndent.pop();\n        }\n      });\n    }\n  },\n  clientDelayOpen: function (node, isFresh) {\n    var cn = node;\n    var id = node._addressIndex;\n    var needLoad = cn._isOpened == false || isFresh;\n    // 延迟加载折叠状态节点的子节点\n    if (!needLoad) {\n      return;\n    }\n    // 获取展示子节点的div\n    var childrenDIV = document.getElementById(\'d\' + this.obj + id);\n\n    // 该结点从未展开过\n    if (childrenDIV != null && childrenDIV.innerHTML == "" || isFresh) {\n      // 将从当前节点到次级根节点之前所有父节点是否是同级节点的最后一个的标志压栈\n      var nodeTemp = cn;\n      var indentArray = [];\n\n      // 循环到次级根节点之前\n      while (nodeTemp._parentNode.id != this.root.id) {\n        indentArray[indentArray.length] = nodeTemp._lastOfSameLevel ? 0 : 1;\n        nodeTemp = nodeTemp._parentNode;\n      }\n      // 反向压栈\n      for (var i = indentArray.length - 1; i >= 0; i--) {\n        this.aIndent.push(indentArray[i]);\n      }\n      // 初始化下下级所有结点，并得到所有下一级子节点的html字符串，并将一层孩子写入到页面中\n      childrenDIV.innerHTML = this.addNode(cn);\n\n      // 清除临时深度\n      for (var i = 0; i < indentArray.length; i++) {\n        this.aIndent.pop();\n      }\n    }\n  },\n  // 当含有子节点的父节点打开\n  o: function (id) {\n    var cn = this.aNodes[id];\n    if (this.config.isdelay) {\n      this.delayOpen(cn);\n    }\n    if (this.config.isclientDelay) {\n      this.clientDelayOpen(cn);\n    }\n    this.nodeStatus(!cn._isOpened, id, cn._lastOfSameLevel);\n    cn._isOpened = !cn._isOpened;\n    if (this.config.closeSameLevel) this.closeLevel(cn);\n    if (this.config.useCookies) this.updateCookie();\n  },\n  oAll: function (status) {\n    for (var n = 0; n < this.aNodes.length; n++) {\n      if (this.aNodes[n] != null && this.aNodes[n]._hasChild && this.aNodes[n].pid != this.root.id) {\n        this.nodeStatus(status, n, this.aNodes[n]._lastOfSameLevel);\n        this.aNodes[n]._isOpened = status;\n      }\n    }\n    if (this.config.useCookies) this.updateCookie();\n  },\n  getAiById: function (id) {\n    for (var n = 0; n < this.aNodes.length; n++) {\n      if (this.aNodes[n] != null && this.aNodes[n].id == id) {\n        return n;\n      }\n    }\n    return null;\n  },\n  // openTo打开到某某节点(只支持静态)\n  openTo: function (nId, isAi) {\n    if (!isAi) {\n      nId = this.getAiById(nId);\n    }\n    if (nId === null) {\n      return;\n    }\n    var cn = this.aNodes[nId];\n    if (this.config.delay) {\n      var openNodeArray = [];\n      while (cn._parentNode.pid != -1) {\n        openNodeArray.push(cn);\n        cn = cn._parentNode;\n      }\n      return;\n    }\n    if (cn.pid == this.root.id || !cn._parentNode) {\n      return;\n    }\n    cn._isOpened = true;\n    if (this.completed && cn._hasChild) {\n      this.nodeStatus(true, cn._addressIndex, cn._lastOfSameLevel);\n    }\n    this.openTo(cn._parentNode._addressIndex, true);\n  },\n  // 相同父节点中的所有子节点中，关闭除node节点之外的所有兄弟节点\n  closeLevel: function (node) {\n    for (var n = 0; n < this.aNodes.length; n++) {\n      if (this.aNodes[n] != null && this.aNodes[n].pid == node.pid && this.aNodes[n].id != node.id && this.aNodes[n]._hasChild) {\n        this.nodeStatus(false, n, this.aNodes[n]._lastOfSameLevel);\n        this.aNodes[n]._isOpened = false;\n        this.closeAllChildren(this.aNodes[n]);\n      }\n    }\n  },\n  // 关闭当前node节点的所有子节点\n  closeAllChildren: function (node) {\n    for (var n = 0; n < this.aNodes.length; n++) {\n      if (this.aNodes[n] != null && this.aNodes[n].pid == node.id && this.aNodes[n]._hasChild) {\n        if (this.aNodes[n]._isOpened) this.nodeStatus(false, n, this.aNodes[n]._lastOfSameLevel);\n        this.aNodes[n]._isOpened = false;\n        this.closeAllChildren(this.aNodes[n]);\n      }\n    }\n  },\n  // 设置当前节点状态\n  // status是否打开\n  // id当前节点地址索引\n  // bottom是否为相同父节点的最后一个子节点\n  nodeStatus: function (isOpen, nodeIndex, isLastNodeOfSameLevel) {\n    eDiv = document.getElementById(\'d\' + this.obj + nodeIndex);\n    eJoin = document.getElementById(\'j\' + this.obj + nodeIndex);\n    if (this.config.usePlusMinusIcons) {\n      eIcon = document.getElementById(\'i\' + this.obj + nodeIndex);\n      if (this.config.useIcons) {\n        eIcon.src = isOpen ? this.aNodes[nodeIndex].iconOpen : this.aNodes[nodeIndex].icon;\n      }\n      eJoin.src = this.config.useLines ? isOpen ? isLastNodeOfSameLevel ? this.icon.minusBottom : this.icon.minus : isLastNodeOfSameLevel ? this.icon.plusBottom : this.icon.plus : isOpen ? this.icon.nlMinus : this.icon.nlPlus;\n    } else {\n      eJoin.src = this.icon.empty;\n    }\n    eDiv.style.display = isOpen ? \'block\' : \'none\';\n  },\n  clearCookie: function () {\n    var now = new Date();\n    var yesterday = new Date(now.getTime() - 1000 * 60 * 60 * 24);\n    this.setCookie(\'co\' + this.obj, \'cookieValue\', yesterday);\n    this.setCookie(\'cs\' + this.obj, \'cookieValue\', yesterday);\n  },\n  setCookie: function (cookieName, cookieValue, expires, path, domain, secure) {\n    document.cookie = escape(cookieName) + \'=\' + escape(cookieValue) + (expires ? \'; expires=\' + expires.toGMTString() : \'\') + (path ? \'; path=\' + path : \'\') + (domain ? \'; domain=\' + domain : \'\') + (secure ? \'; secure\' : \'\');\n  },\n  // iTree有两个cookieName\n  // 1、co当前打开的currentOpen\n  // 2、cs当前选择的currentSelected\n  getCookie: function (cookieName) {\n    var cookieValue = \'\';\n    var posName = document.cookie.indexOf(escape(cookieName) + \'=\');\n    if (posName != -1) {\n      var posValue = posName + (escape(cookieName) + \'=\').length;\n      var endPos = document.cookie.indexOf(\';\', posValue);\n      if (endPos != -1) cookieValue = unescape(document.cookie.substring(posValue, endPos));else cookieValue = unescape(document.cookie.substring(posValue));\n    }\n    return cookieValue;\n  },\n  updateCookie: function () {\n    var str = \'\';\n    for (var n = 0; n < this.aNodes.length; n++) {\n      if (this.aNodes[n] != null && this.aNodes[n]._isOpened && this.aNodes[n].pid != this.root.id) {\n        if (str) str += \'.\';\n        str += this.aNodes[n].id;\n      }\n    }\n    this.setCookie(\'currentOpen\' + this.obj, str);\n  },\n  // [Cookie] Checks if a node id is in a cookie\n  // 判断节点是否为打开状态\n  isOpen: function (id) {\n    var aOpen = this.getCookie(\'currentOpen\' + this.obj).split(\'.\');\n    for (var n = 0; n < aOpen.length; n++) if (aOpen[n] == id) {\n      return true;\n    }\n    return false;\n  },\n  getAllId: function () {\n    var idArray = [];\n    for (var i = 0; i < this.aNodes.length; i++) {\n      idArray.push(this.aNodes[i].id);\n    }\n    return idArray;\n  },\n  getAllParentNode: function () {\n    var cn = this.aNodes[this.getSelectedAi()];\n    var parentNodeIdArray = [];\n    if (cn) {\n      while (cn.id != -1) {\n        parentNodeIdArray.push(cn.id);\n        cn = cn._parentNode;\n      }\n    } else {\n      parentNodeIdArray.push(0);\n    }\n    return parentNodeIdArray;\n  },\n  selectChilds: function (parentIds, currentSelected, length) {\n    pids = [];\n    for (var n = 0; n < length; n++) {\n      if (parentIds.indexOf(this.aNodes[n].pid) != -1) {\n        if (this.aNodes[n].showCtrl != false) {\n          document.getElementById("c" + this.obj + n).checked = currentSelected;\n          pids.push(this.aNodes[n].id);\n        }\n      }\n    }\n    if (pids.length != 0) {\n      this.selectChilds(pids, currentSelected, length);\n    }\n  },\n  getRadioSelected: function () {\n    return null;\n  },\n  selectCheckbox: function (nodeId) {\n    var node = this.aNodes[nodeId];\n    var currentSelected = null;\n    if (node.selectChild == undefined || node.selectChild == true) {\n      currentSelected = document.getElementById("c" + this.obj + nodeId).checked;\n      if (currentSelected) {\n        var cn = node;\n        var c;\n        while (cn.id != -1) {\n          c = document.getElementById("c" + this.obj + cn._addressIndex);\n          if (c) c.checked = true;\n          cn = cn._parentNode;\n        }\n      }\n      var len = this.aNodes.length;\n      var parentIds = [];\n      for (var n = 0; n < len; n++) {\n        if (n != nodeId && this.aNodes[n] != null && this.aNodes[n].pid == node.id) {\n          if (this.aNodes[n].showCtrl != false) {\n            document.getElementById("c" + this.obj + n).checked = currentSelected;\n            parentIds.push(this.aNodes[n].id);\n          }\n        }\n      }\n      if (parentIds.length != 0) {\n        this.selectChilds(parentIds, currentSelected, len);\n      }\n    }\n    if (this.checkBoxClick) {\n      this.checkBoxClick(node.id, currentSelected);\n    }\n  },\n  // 字符串格式1,2,3\n  // Array\n  setChecked: function (checkedId) {\n    if (typeof checkedId == "string") {\n      checkedId = checkedId.split(",");\n    }\n    var checkBoxList = document.getElementsByName("iTreecbx");\n    for (var n = 0; n < checkBoxList.length; n++) {\n      var currentId = parseInt(checkBoxList[n].value, 10);\n      if (checkedId.indexOf(currentId) !== -1) {\n        checkBoxList[n].checked = true;\n      }\n    }\n  },\n  getAllCheckedTitle: function () {\n    var nodes = [];\n    var checkBoxList = document.getElementsByName("iTreecbx");\n    for (var i = 0; i < checkBoxList.length; i++) {\n      if (checkBoxList[i].checked === true) {\n        arrayIndex = checkBoxList[i].id.replace(\'c\' + this.obj, \'\');\n        nodes.push(this.aNodes[arrayIndex].title);\n      }\n    }\n    return nodes;\n  },\n  getAllChecked: function () {\n    var nodes = [];\n    var checkBoxList = document.getElementsByName("iTreecbx");\n    for (var i = 0; i < checkBoxList.length; i++) {\n      if (checkBoxList[i].checked === true) {\n        arrayIndex = checkBoxList[i].id.replace(\'c\' + this.obj, \'\');\n        nodes.push(this.aNodes[arrayIndex]);\n      }\n    }\n    return nodes;\n  },\n  getAllCheckedId: function () {\n    var nodes = [];\n    var checkBoxList = document.getElementsByName("iTreecbx");\n    for (var i = 0; i < checkBoxList.length; i++) {\n      if (checkBoxList[i].checked === true) {\n        nodes.push(checkBoxList[i].value);\n      }\n    }\n    return nodes.join();\n  },\n  show: function (e, width, maxHeight) {\n    if (this.floatTreeFrameId) {\n      return;\n    }\n    // 根据主树重建用户选择树，未访问数据库\n    if (this.config.reBuildTree) this.config.reBuildTree();\n    // 通过方法loadFloatTree方法建新树\n    if ($(this.config.floatTreeId).innerHTML.trim() == "" && typeof this.config.loadFloatTree != "undefined") {\n      this.config.loadFloatTree();\n    }\n    var srcObject = $.event(e).srcElement;\n    var sparrowElement = $(srcObject);\n    var HTMLObject = document.createElement("DIV");\n    HTMLObject.id = this.config.floatTreeId + "Frame";\n    HTMLObject.style.cssText = "position:absolute;width:" + width + "px;height:0px;border:#ccc 1px solid;background:#ffffff; padding:1px;text-align:left;overflow:auto;";\n    HTMLObject.innerHTML = this.config.loadingString;\n    document.body.appendChild(HTMLObject);\n    HTMLObject.onclick = function (e) {\n      $.event(e).cancelBubble();\n    };\n    HTMLObject.style.left = sparrowElement.getAbsoluteLeft() + 1 + "px";\n    HTMLObject.style.top = sparrowElement.getAbsoluteTop() + srcObject.offsetHeight + "px";\n    this.interval = window.setInterval(this.fullObjName + ".intervalShow(" + maxHeight + ")", 10);\n  },\n  intervalShow: function (maxHeight) {\n    var FrameId = this.config.floatTreeId + "Frame";\n    // var divWidth=parseInt($(FrameId).style.width.replace("px",""));\n    var divHeight = $(FrameId).clientHeight + 15;\n    if (divHeight >= maxHeight) {\n      this.floatTreeFrameId = FrameId;\n      if ($(this.config.floatTreeId) && $(this.config.floatTreeId).innerHTML != "") {\n        var treeDiv = $(this.config.floatTreeId);\n        $(FrameId).innerHTML = "";\n        treeDiv.style.display = "block";\n        $(FrameId).appendChild(treeDiv);\n        window.clearInterval(this.interval);\n      }\n    } else {\n      $(FrameId).style.height = divHeight + "px";\n    }\n  },\n  clearFloatFrame: function () {\n    if (this.floatTreeFrameId) {\n      var TreeFrame = $(this.floatTreeFrameId);\n      // reBuildTree is a function to build floatTree from loaded tree\n      if (!this.config.reBuildTree) {\n        var tree = $(this.config.floatTreeId);\n        tree.style.display = "none";\n        document.body.appendChild(tree);\n      }\n      document.body.removeChild(TreeFrame);\n      this.floatTreeFrameId = null;\n      window.clearInterval(this.interval);\n    }\n    if ($("orderDiv")) {\n      document.body.removeChild($("orderDiv"));\n    }\n  },\n  //定义 config.loadFloatTree  树初始化方法\n  initResourceTree: function (resourcePrefix, ajaxUrl) {\n    if (!ajaxUrl) ajaxUrl = $.url.root + "/resource/load-all";\n    var treeObject = this;\n    this.config.loadFloatTree = function () {\n      $.ajax.json(ajaxUrl, resourcePrefix, function (result) {\n        var jsonList = result.data || result.message;\n        treeObject.aNodes = [];\n        treeObject.resetIcon();\n        treeObject.config.usePlusMinusIcons = false;\n        treeObject.config.useRootIcon = false;\n        treeObject.add(jsonList[0].parentId, -1, "");\n        treeObject.resetIcon();\n        for (var i = 0; i < jsonList.length; i++) {\n          if ($.isNullOrEmpty(jsonList[i].icoUrl)) {\n            jsonList[i].icoUrl = $.DEFAULT_RESOURCE_ICO_URL;\n          }\n          treeObject.add(jsonList[i].id, jsonList[i].parentId, jsonList[i].name, "javascript:" + treeObject.fullObjName + ".codeNodeClick(" + (i + 1) + ");", jsonList[i].name, undefined, undefined, undefined, jsonList[i], jsonList[i].icoUrl);\n        }\n        $(treeObject.config.floatTreeId).innerHTML = treeObject;\n      });\n    };\n  },\n  // 定义this.config.loadFloatTree 码表初始化方法\n  initCodeTooltip: function (codePrefix, ajaxUrl) {\n    var htmlEvents = ("$(\'#\'+{0}.config.descTextBoxId).bind(\'onchange\',function(){" + "if($({0}.config.descTextBoxId).value==\'\'){" + "$({0}.config.descHiddenId).value=\'\';" + "if(typeof({0}.config.valueTextBoxId)!=\'undefined\')" + "{$({0}.config.valueTextBoxId).value=\'\';$({0}.config.valueTextBoxId).readOnly=\'readonly\';}}});").format(this.fullObjName);\n    eval(htmlEvents);\n    var treeObject = this;\n    if ($(treeObject.config.floatTreeId) == null) {\n      var floatTree = $("+div").s;\n      floatTree.id = treeObject.config.floatTreeId;\n      floatTree.className = "floatTree";\n      document.body.appendChild(floatTree);\n    }\n    if (!ajaxUrl) {\n      ajaxUrl = $.url.root + "/code/load";\n    }\n    this.dbs = function (nodeIndex) {\n      var businessEntity = this.aNodes[nodeIndex].businessEntity;\n      if (this.config.descHiddenId != null) {\n        $(this.config.descHiddenId).value = businessEntity.id;\n      }\n      if (this.config.descTextBoxId != null) {\n        var descCtrl = $(this.config.descTextBoxId);\n        if (descCtrl.type === "text") {\n          descCtrl.value = this.getAllNameOfNode(this.aNodes[nodeIndex], "/");\n        } else {\n          descCtrl.innerHTML = this.getAllNameOfNode(this.aNodes[nodeIndex], "/");\n        }\n      }\n      if (this.config.valueTextBoxId != null) {\n        $(this.config.valueTextBoxId).value = businessEntity.value;\n      }\n      if (this.codeNodeCallBack) {\n        this.codeNodeCallBack(this.aNodes[nodeIndex]);\n      }\n      this.clearFloatFrame();\n      if (this.config.validate) {\n        this.config.validate();\n      } else if (this.config.validateConfig) {\n        $.v.isNull(this.config.validateConfig, descCtrl);\n      }\n    };\n    treeObject.config.loadFloatTree = function () {\n      $.ajax.json(ajaxUrl, "prefix=" + codePrefix, function (result) {\n        var jsonList = result.data || result.message;\n        treeObject.aNodes = [];\n        treeObject.resetIcon();\n        treeObject.config.usePlusMinusIcons = false;\n        treeObject.config.useRootIcon = false;\n        treeObject.add(jsonList[0].parentId, -1, "");\n        for (var i = 0; i < jsonList.length; i++) {\n          treeObject.add(jsonList[i].id, jsonList[i].parentId, jsonList[i].name, "javascript:" + treeObject.fullObjName + ".codeNodeClick(" + (i + 1) + ");", jsonList[i].code + "|" + jsonList[i].name, undefined, undefined, undefined, jsonList[i]);\n        }\n        $(treeObject.config.floatTreeId).innerHTML = treeObject;\n      });\n    };\n  },\n  //codeNodeClick--\x3e dbs --\x3ecodeNodeCallBack\n  codeNodeClick: function (nodeIndex) {\n    if (this.aNodes[nodeIndex].childCount === 0) {\n      this.dbs(nodeIndex);\n    }\n  }\n};\nSparrow.dispatcher = {\n  builder: {\n    id: "id",\n    //控件标签 id\n    delegate: "delegate",\n    //事件委托\n    api: "api",\n    //ajax请求的api\n    strategy: "strategy",\n    //策略 控件的 value\n    eventName: "eventName" //事件的名称 默认为onclick\n  },\n\n  commandAdapter: {},\n  ctrlIdEventMap: {},\n  eventRegistry: [],\n  /**\n   *\n   * @param eventConfig\n   * {\n              id: "btn1",//控件标签 id\n              delegate: function (e, srcElement) {\n                  alert(srcElement.value);\n                  srcElement.value = "update";\n              },//事件委托\n              //api: "api",//ajax请求的api\n              strategy: "insert",//策略对应控件的Value\n              eventName:"onclick"\n     }\n   */\n  register: function (eventConfig) {\n    this.eventRegistry.push(eventConfig);\n  },\n  dispatcher: function (e, srcElement) {\n    //btnInsert+"新增"\n    //btnInsert+"更新"\n    var commandKey = srcElement.id + "_" + srcElement.value;\n    var builder = this.commandAdapter[commandKey];\n    var delegate = null;\n    if (builder != null) {\n      delegate = builder.delegate;\n    }\n    if (delegate == null) {\n      builder = this.commandAdapter[srcElement.id];\n      if (builder != null) {\n        delegate = builder.delegate;\n      }\n    }\n    if (builder == null || delegate == null) {\n      return;\n    }\n    if (builder.api) {\n      $.ajax.json(builder.api, builder.parameter, delegate, srcElement);\n      return;\n    }\n    delegate(e, srcElement);\n  },\n  bind: function () {\n    for (var i = 0; i < this.eventRegistry.length; i++) {\n      var builder = this.eventRegistry[i];\n      var strategy = builder.strategy;\n      var eventName = builder.eventName;\n      var commandKey = builder.id + (strategy ? "_" + strategy : "");\n      this.commandAdapter[commandKey] = builder;\n      this.ctrlIdEventMap[builder.id] = eventName ? eventName : "onclick";\n    }\n    for (ctrlId in this.ctrlIdEventMap) {\n      //bind(event,function(e){});\n      $("#" + ctrlId).bind(this.ctrlIdEventMap[ctrlId], function (e) {\n        Sparrow.dispatcher.dispatcher(e, $.event(e).srcElement);\n      });\n    }\n  }\n};\nSparrow.user = {\n  authorMap: null,\n  author: null,\n  login: {\n    dialog: function (nsOfCallBack, args) {\n      var url = $.url.passport + "/login-dialog?register=false&callback-ns=" + nsOfCallBack;\n      if (!$.isNullOrEmpty(args)) {\n        url += "&parameter=" + args;\n      }\n      document.domain = $.browser.cookie.root_domain;\n      $.window({\n        url: url,\n        showHead: false\n      });\n    },\n    ns_callback: {\n      publish: "thread.publish",\n      attention: "user.attention",\n      cancel_attention: "user.attention.cancel",\n      comment: "thread.comment",\n      upload: "upload",\n      like_thread: "thread.like"\n    }\n  },\n  getZone: function (userId) {\n    return $.url.root + "/zone-" + userId;\n  },\n  getAvatar: function (avatar) {\n    return avatar ? avatar : $.DEFAULT_AVATOR_URL;\n  },\n  // 是否有编辑权限\n  editable: function (authorId) {\n    var currentUserId = $.browser.getUserId();\n    if (currentUserId <= 0) {\n      return false;\n    }\n    return authorId === currentUserId;\n  },\n  initLoginBar: function () {\n    if (!$("divAccount")) {\n      return;\n    }\n    if ($.browser.isLogin()) {\n      $("divAccount").style.display = "block";\n      $("divLogin").style.display = "none";\n      var hyperUser = $("hyperUser");\n      $(hyperUser).html($.browser.getUserName());\n      hyperUser.title = $.browser.getUserName();\n      hyperUser.href = $.user.getZone($.browser.getUserId());\n      return;\n    }\n    $("divAccount").style.display = "none";\n    $("divLogin").style.display = "block";\n  },\n  // 游客的鼠标悬停头象效果\n  popup: function (srcElement, userId) {\n    var userInfo = this.authorMap == null ? this.author : this.authorMap[userId];\n    var divUserInfo = $("divUserInfo");\n    if (divUserInfo == null) {\n      divUserInfo = $("+div.divUserInfo");\n      divUserInfo.s.style.cssText = "border: #ccc 1px solid; position: absolute; width:300px; height:120px; background: #ffffff;overflow: hidden;";\n      divUserInfo.s.onmouseover = function (e) {\n        console.log("user info  mouse over ...");\n        $.event(e).cancelBubble();\n      };\n      document.body.appendChild(divUserInfo.s);\n    }\n    $("divUserInfo").style.top = $(srcElement).getAbsoluteTop() - 2 + "px";\n    $("divUserInfo").style.left = $(srcElement).getAbsoluteLeft() - 2 + "px";\n    var POPUP_HTML = [];\n    POPUP_HTML.push(\'<table style="border: 0;background:#fff;" cellpadding="0" cellspacing="0">\');\n    POPUP_HTML.push("<tr>");\n    POPUP_HTML.push(\'<td style="border: 0; width:60px;" valign="top">\');\n    POPUP_HTML.push(\'<a href="{0}" target="_blank"><img style="width:50px; height: 50px; border: 2px #EDEDED solid;" src="{1}" /></a>\'.format(this.getZone(userInfo.id), this.getAvatar(userInfo.avatar)));\n    POPUP_HTML.push("</td>");\n    POPUP_HTML.push(\'<td style="border: 0; width: 240px; line-height: 25px;text-align:left;">\');\n    POPUP_HTML.push(\'昵称:<a href="{2}" target="_blank"><span>{0}</span></a>{1}<br />\'.format(userInfo.name, "attention", this.getZone(userInfo.id)));\n    POPUP_HTML.push("性别:<span>{0}</span><br />".format(userInfo.gender));\n    if (userInfo.createTime) {\n      POPUP_HTML.push("注册日期:<span>{0}</span><br />".format(userInfo.createTime));\n    }\n    if (userInfo.lastLoginTime) {\n      POPUP_HTML.push("最后登陆:<span>{0}</span><br />".format(userInfo.lastLoginTime));\n    }\n    if (!$.isNullOrEmpty(userInfo.status)) {\n      POPUP_HTML.push("状态：<span>{0}</span><br />".format(userInfo.status));\n    }\n\n    // if (userInfo.extend && userInfo.extend.COUNT) {\n    //     POPUP_HTML.push(\'COUNT：<span>{0}</span><br />\'.format(userInfo.extend.COUNT));\n    // }\n    $("divUserInfo").innerHTML = POPUP_HTML.join("");\n    $("#divUserInfo").show();\n\n    // 鼠标离开头象效果\n    document.onmouseover = function (e) {\n      $("#divUserInfo").hidden();\n    };\n  },\n  json: function (json) {\n    var jsonHidden = $(json);\n    if (jsonHidden != null) {\n      json = jsonHidden.value.json();\n    }\n    return json;\n  },\n  initAuthor: function (json) {\n    this.author = this.json(json);\n  },\n  initAuthorMap: function (json) {\n    this.authorMap = this.json(json);\n  },\n  attention: function () {\n    return false;\n    /**\n         * // 是否关注过\n         var attention = "";\n         if (userInfo.extend.ATTENTION_RELATION != "NONE") {\n                    // 当前用户是游客或者未关注该用户\n                    if (!$.browser.isLogin()\n                        || userInfo.extend.ATTENTION_RELATION == "NULL" || userInfo.extend.ATTENTION_RELATION == "FANS") {\n                        // 需要登录后关注\n                        attention = \'<a target="_self" onclick="attention(\\\'\'\n                            + userId\n                            + \'\\\',this);"\'\n                            + \'href="javascript:void(0);">关注</a>\';\n                    } else {\n                        // 我关注过该用户\n                        if (userInfo.extend.ATTENTION_RELATION == "ATTENTION" || userInfo.extend.ATTENTION_RELATION == "EACH_OTHER_ATTENTION") {\n                            attention = \'<a target="_self" onclick="cancelattention(\\\'\'\n                                + userId\n                                + \'\\\',this);"\'\n                                + \'href="javascript:void(0);">取消关注</a>\';\n                        }\n                    }\n                    userInfo.extend.ATTENTION_RELATION = attention;\n                }\n         else {\n                    userInfo.extend.ATTENTION_RELATION = ""\n                }\n         */\n  },\n\n  getToken: function () {\n    //url 优先\n    var token = Sparrow.request("token");\n    if (!Sparrow.isNullOrEmpty(token)) {\n      localStorage.setItem("token", token);\n      return token;\n    }\n    return localStorage.getItem("token");\n  }\n};\n\n/* 第三方分享实现 */\nSparrow.share = {\n  config: {\n    icon: $.url.resource + \'/images/share.png\',\n    share: [\n    // 无appkey但有websit配置\n    {\n      url: \'http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?style=202&width=80&height=31&showcount=1&url={0}&title={1}&pics={2}&desc={3}&summary={4}&site=\' + encodeURIComponent($.browser.getCookie($.browser.cookie.website_name)) + \'&otype=share\',\n      position: {\n        left: 160,\n        top: 0\n      },\n      title: "分享到QQ空间"\n    }, {\n      url: \'http://service.weibo.com/share/share.php?appkey=318168823&url={0}&title={1}&pic={2}&ralateUid=3199233727\',\n      position: {\n        left: 0,\n        top: 0\n      },\n      title: "分享到新浪微博"\n    }]\n  },\n  init: function () {\n    var shareArray = document.getElementsByName("share");\n    var shareTemplateArray = [];\n    for (var j = 0; j < this.config.share.length; j++) {\n      shareTemplateArray.push(\'<a target="_blank" style="height:32px;width:32px;display:inline-block;background:url({0}) {1}px {2}px;" title="{3}" href="{4}"></a>\'.format(this.config.icon, this.config.share[j].position.left, this.config.share[j].position.top, this.config.share[j].title, this.config.share[j].url));\n    }\n    shareTemplate = shareTemplateArray.join("");\n    for (var i = shareArray.length - 1; i >= 0; i--) {\n      var shareData = shareArray[i].value.json();\n      shareArray[i].parentNode.innerHTML = shareTemplate.format(encodeURIComponent(shareData.url), encodeURIComponent(shareData.title), encodeURIComponent(shareData.pic), encodeURIComponent(shareData.comment), encodeURIComponent(shareData.summary));\n    }\n  }\n};\nSparrow.webSocket = function (url, token) {\n  this.url = url;\n  // websocket 连接的 token\n  this.token = token;\n  // 接收到信息后需要执行的事件\n  this.onMsgCallback = null;\n  // 心跳间隔时间 10s\n  this.heartTime = 10000;\n  // 心跳超时时间 12s\n  this.heartTimeout = 20000;\n  // 重连时间 0.5s\n  this.reconnectTime = 500;\n  this.timeoutTimer = null;\n  this.serverTimeoutTimer = null;\n  this.ws = null;\n  this.lastHeartTime = 0;\n  this.reconnectionAlarmTimer = null;\n  this.reconnectionAlarmCallback = null;\n  this.userId = null;\n};\nSparrow.webSocket.prototype.connect = function (resolve, reject) {\n  try {\n    if ("WebSocket" in window) {\n      this.ws = new WebSocket(this.url, [this.token]);\n      //resolve 或者reject 必须，如果未执行，会导致后续代码不执行\n      this._onOpen();\n      this._onMsg(resolve, reject);\n      this._onClose(reject);\n      this._onError(reject);\n    }\n  } catch (e) {\n    console.log(e);\n    this.reconnectWebSocket();\n  }\n};\nSparrow.webSocket.prototype.close = function () {\n  // 关闭连接\n  this.ws.close();\n};\nSparrow.webSocket.prototype.reconnectWebSocket = function () {\n  //如果是服务器关闭的连接，不需要重连\n  if (new Date() - this.lastHeartTime > this.heartTimeout * 2) {\n    console.log("发起重连");\n    this.reconnectionAlarmTimer = setInterval(() => {\n      if (this.reconnectionAlarmCallback) {\n        this.reconnectionAlarmCallback();\n      }\n      console.log("连接断开，请刷新浏览器！");\n    }, 10000);\n    this.closeHeartBeat();\n  } else {\n    console.log("服务器顶替逻辑，不重连!");\n  }\n};\nSparrow.webSocket.prototype._onOpen = function () {\n  this.ws.onopen = e => {\n    console.log(e.currentTarget.protocol);\n    console.log("连接成功" + e);\n    this.closeHeartBeat();\n    // 启动心跳\n    this.startHeartBeat();\n  };\n};\nSparrow.webSocket.prototype._onMsg = function (resolve) {\n  this.ws.onmessage = e => {\n    console.log("收到消息" + e.data);\n    // 加个判断,如果是PONG，说明当前是后端返回的心跳包 停止下面的代码执行\n    if (typeof e.data === "string") {\n      if (e.data === "PONG") {\n        this.lastHeartTime = new Date().getTime();\n        return;\n      }\n      if (e.data === "offline") {\n        this.lastHeartTime = new Date().getTime();\n        if (this.onMsgCallback) {\n          this.onMsgCallback({\n            offline: true\n          });\n        }\n        return;\n      }\n      var userIndex = e.data.indexOf("USER.");\n      if (userIndex > -1) {\n        this.userInfo = e.data.substring(5);\n        resolve(this.userInfo);\n        return;\n      }\n    }\n    this.onMsgCallback(e.data);\n  };\n};\nSparrow.webSocket.prototype._onClose = function (reject) {\n  this.ws.onclose = e => {\n    console.log("close 事件");\n    if (e.wasClean) {\n      // 干净的关闭，客户端主动关闭 不需要发起重连,关闭上一个心跳\n      console.log("不重连");\n    } else {\n      // 异常关闭 需要发起重连\n      this.reconnectWebSocket();\n    }\n    reject(e);\n  };\n};\nSparrow.webSocket.prototype._onError = function (reject) {\n  this.onerror = e => {\n    // 如果出现连接、处理、接收、发送数据失败的时候触发onerror事件\n    console.log("连接出错" + e);\n    this.reconnectWebSocket();\n    reject(e);\n  };\n};\n\n// 心跳机制 --启动心跳\nSparrow.webSocket.prototype.startHeartBeat = function () {\n  this.timeoutTimer = setInterval(() => {\n    // 开启一个心跳\n    try {\n      this.ws.send("PING");\n    } catch (e) {\n      console.log("heart beat error:" + e);\n    }\n    console.log("heart beat: " + new Date().getSeconds() + " timer id:" + this.timeoutTimer);\n  }, this.heartTime);\n\n  // 检测当前开启的这个心跳是否超时\n  this.serverTimeoutTimer = setInterval(() => {\n    // 如果超过两个周期未拿到心跳，说明超时\n    if (new Date().getTime() - this.lastHeartTime > this.heartTime * 2) {\n      this.reconnectWebSocket();\n    }\n  }, this.heartTimeout);\n};\n\n// 关闭心跳\nSparrow.webSocket.prototype.closeHeartBeat = function () {\n  clearTimeout(this.timeoutTimer);\n  clearTimeout(this.serverTimeoutTimer);\n};\n//发送消息\nSparrow.webSocket.prototype.sendMessage = function (data) {\n  // 发送到服务器\n  this.ws.send(data.toBytes());\n};\n\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/../../source/scripts/sparrow_es.js?')},"../api/Initialization.js":
/*!********************************!*\
  !*** ../api/Initialization.js ***!
  \********************************/function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Initialization": function() { return /* binding */ Initialization; }\n/* harmony export */ });\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ "./node_modules/core-js/modules/es.array.push.js");\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm.js");\n/* harmony import */ var _source_scripts_ImProtocol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../source/scripts/ImProtocol */ "../../source/scripts/ImProtocol.js");\n\n\n\nconst CHAT_API = ({"NODE_ENV":"prod","VUE_APP_SPARROW_BASE_URL":"http://chat.sparrowzoo.com/chat/v2","VUE_APP_CONSUMER_BASE_URL":"http://studyapi.zhilongsoft.com","BASE_URL":"/chat/m/"}).VUE_APP_CHAT_API ? ({"NODE_ENV":"prod","VUE_APP_SPARROW_BASE_URL":"http://chat.sparrowzoo.com/chat/v2","VUE_APP_CONSUMER_BASE_URL":"http://studyapi.zhilongsoft.com","BASE_URL":"/chat/m/"}).VUE_APP_CHAT_API : "Chat";\nawait Promise.resolve().then(function webpackMissingModule() { var e = new Error("Cannot find module \'@/Chat\'"); e.code = \'MODULE_NOT_FOUND\'; throw e; }).then(ChatApi => {\n  vue__WEBPACK_IMPORTED_MODULE_2__["default"].use(ChatApi);\n});\nvar Initialization = {\n  initPlatformService: async function (Vue) {\n    var res = await ChatApi.platformServices();\n    if (res.code === 200) {\n      Vue.prototype.$platformServers = res.rows;\n      res.rows.forEach(user => {\n        user.platform = true;\n        Vue.prototype.$userMap[user.userId] = user;\n      });\n    }\n    console.log("res", res);\n  },\n  initContact: async function (Vue, vue) {\n    var res = await ChatApi.getContacts();\n    Vue.prototype.$contact = res.data;\n    console.log("res", res);\n    var userMap = {};\n    res.data.users.forEach(user => {\n      userMap[user.userId] = user;\n    });\n    Vue.prototype.$userMap = userMap;\n    var qunMap = {};\n    res.data.quns.forEach(qun => {\n      qunMap[qun.qunId] = qun;\n    });\n    Vue.prototype.$qunMap = qunMap;\n    console.log("userMap", userMap);\n  },\n  _oppositeUser: function (session, vue) {\n    return _source_scripts_ImProtocol__WEBPACK_IMPORTED_MODULE_1__.ImProtocol.getOppositeUser(session.chatSession.sessionKey, vue.$getUserId());\n  },\n  fetchUserIds: function (sessions) {\n    var userIds = [];\n    sessions.forEach(session => {\n      //考虑接收方和发送方的 消息拉取逻辑\n      if (userIds.indexOf(session.chatSession.sender) < 0) {\n        userIds.push(session.chatSession.sender);\n      }\n      if (session.chatSession.receiver > 0 && userIds.indexOf(session.chatSession.receiver) < 0) {\n        userIds.push(session.chatSession.receiver);\n      }\n      session.messages.forEach(message => {\n        if (userIds.indexOf(message.sender) < 0) {\n          userIds.push(message.sender);\n        }\n      });\n    });\n    return userIds;\n  },\n  assembleSessions: function (sessions, userMap, vue) {\n    var sessionList = [];\n    //组装会话列表\n    sessions.forEach(session => {\n      var chatSession = session.chatSession;\n      const chatType = chatSession.chatType; //1群 0单聊\n      const sessionKey = chatSession.sessionKey; //唯一id，1 2 N群ID\n      var newSession = null;\n      if (chatType === vue.$protocol.CHAT_TYPE_1_2_1) {\n        //获取对方用户信息\n        var oppositeUserId = this._oppositeUser(session, vue);\n        var oppositeUser = userMap[oppositeUserId];\n        // 普通用户\n        if (!oppositeUser) {\n          return null;\n        }\n        newSession = {\n          key: sessionKey,\n          //session 类型\n          type: chatType,\n          //session 头象\n          icon: oppositeUser.avatar,\n          lastReadTime: session.lastReadTime,\n          flag: oppositeUser.flagUrl,\n          //session 名称 对方的昵称\n          title: oppositeUser.userName,\n          //对方ID\n          oppositeUserId: oppositeUser.userId,\n          //消息列表\n          messages: session.messages\n        };\n      }\n      if (chatType === vue.$protocol.CHAT_TYPE_1_2_N) {\n        var qun = vue.$qunMap[sessionKey];\n        newSession = {\n          key: sessionKey,\n          type: chatType,\n          title: qun.qunName,\n          messages: session.messages,\n          icon: qun.unitIcon,\n          lastReadTime: session.lastReadTime\n        };\n      }\n      this.assembleLastMessage(newSession, vue);\n      sessionList.push(newSession);\n    });\n    return sessionList;\n  },\n  resortSessions: function (vue) {\n    vue.$sessions = vue.$sessions.sort(function (a, b) {\n      if (b.lastReadTime === a.lastReadTime) {\n        return 0;\n      }\n      return b.lastReadTime > a.lastReadTime ? 1 : -1;\n    });\n  },\n  initActiveSession: function (vue) {\n    var currentUsrId = vue.$getUserId();\n    var key = vue.$route.query.key;\n    var targetUserId = vue.$route.query.targetUserId;\n    if (key == null && targetUserId == null) {\n      //如果没有指定session key 则默认取第一个,即最近的聊天\n      vue.activeSession = vue.sessionList[0];\n      return;\n    }\n    var oppositeUser = null;\n    if (targetUserId != null) {\n      oppositeUser = vue.$userMap[targetUserId];\n      key = this.get121Session(oppositeUser, vue);\n      vue.activeSession = vue.$sessionMap[key];\n      return;\n    }\n    //如果指定了session key 则取指定的session\n    //说明是一对一单聊\n    if (key.indexOf("_") > -1) {\n      var oppositeId = vue.$protocol.getOppositeUser(key, currentUsrId);\n      oppositeUser = vue.$userMap[oppositeId];\n      this.get121Session(oppositeUser, vue);\n    } else {\n      var qun = vue.$qunMap[key];\n      this.getQunSession(qun, vue);\n    }\n    vue.activeSession = vue.$sessionMap[key];\n  },\n  setSessionLastReadTime: function (session) {\n    session.lastReadTime = new Date().getTime() + 2;\n  },\n  rebuild: function (protocol, vue) {\n    var sender = vue.$userMap[protocol.sender];\n    var imgUrl = null;\n    if (protocol.msgType === vue.$protocol.IMAGE_MESSAGE) {\n      var fileBlob = new Blob([protocol.msg]);\n      imgUrl = window.URL.createObjectURL(fileBlob);\n    }\n    var message = {\n      id: protocol.clientSendTime,\n      chatType: protocol.chatType,\n      sender: protocol.sender,\n      clientSendTime: protocol.clientSendTime,\n      serverTime: protocol.clientSendTime,\n      //新消息默认与本地时间一致\n      messageType: protocol.msgType,\n      content: protocol.msg,\n      imgUrl: imgUrl,\n      isMe: protocol.sender === vue.$getUserId(),\n      userName: sender.userName,\n      avatar: sender.avatar,\n      time: new Date(protocol.clientSendTime).format("MM/dd hh:mm:ss"),\n      isText: protocol.msgType === vue.$protocol.TEXT_MESSAGE,\n      session: protocol.chatType === vue.$protocol.CHAT_TYPE_1_2_N ? protocol.sessionKey : _source_scripts_ImProtocol__WEBPACK_IMPORTED_MODULE_1__.ImProtocol.generate121SessionKey(protocol.sender, protocol.receiver)\n    };\n    var session = vue.$sessionMap[message.session];\n    session.messages.push(message);\n    this.assembleLastMessage(session, vue);\n  },\n  //组装1对1会话 和具体业务相关\n  get121Session: function (friend, vue) {\n    var currentUserId = vue.$getUserId();\n    //通讯录好友聊天，一定存在对方用户\n    var sessionKey = vue.$protocol.generate121SessionKey(friend.userId, currentUserId);\n    var session = vue.$sessionMap[sessionKey];\n    if (session != null) {\n      return sessionKey;\n    }\n    session = {\n      platform: !!friend.platform,\n      //1对1的key\n      key: sessionKey,\n      //发送方ID\n      type: _source_scripts_ImProtocol__WEBPACK_IMPORTED_MODULE_1__.ImProtocol.CHAT_TYPE_1_2_1,\n      //session 头象\n      icon: friend.avatar,\n      flag: friend.flagUrl,\n      //session 名称 对方的昵称\n      title: friend.userName,\n      //消息列表\n      messages: [],\n      oppositeUserId: friend.userId,\n      lastReadTime: 0\n    };\n    vue.$sessions.push(session);\n    vue.$sessionMap[session.key] = session;\n    return session.key;\n  },\n  getQunSession: function (qun, vue) {\n    //通讯录好友聊天，一定存在对方用户\n    var sessionKey = qun.qunId;\n    var session = vue.$sessionMap[sessionKey];\n    if (session != null) {\n      return sessionKey;\n    }\n    session = {\n      key: sessionKey,\n      //发送方ID\n      type: _source_scripts_ImProtocol__WEBPACK_IMPORTED_MODULE_1__.ImProtocol.CHAT_TYPE_1_2_N,\n      //session 头象\n      icon: qun.unitIcon,\n      title: qun.qunName,\n      //消息列表\n      messages: [],\n      lastReadTime: 0\n    };\n    vue.$sessions.push(session);\n    vue.$sessionMap[session.key] = session;\n    return session.key;\n  },\n  assembleLastMessage(session, vue) {\n    if (session.messages == null || session.messages.length === 0) {\n      return;\n    }\n    var lastMessage = null;\n    var lastMessageTime = null;\n    var lastMessageContent = null;\n    lastMessage = session.messages[session.messages.length - 1]; //最后收到的一条消息\n    lastMessageTime = lastMessage.clientSendTime; //最后一条消息的发送时间\n    lastMessageContent = lastMessage.messageType === 1 ? "/图片/" : lastMessage.content;\n    const unReadCount = session.messages.filter(message => message.serverTime >= session.lastReadTime).length;\n\n    //最后一条消息的发送时间\n    session.lastMessageTime = lastMessageTime;\n    session.time = new Date(lastMessageTime).format("MM/dd hh:mm:ss");\n    session.lastMessageContent = lastMessageContent;\n    session.unReadCount = unReadCount;\n  },\n  initSessions: async function (Vue, vue) {\n    //获取当前用户的所有会话\n    var sessions = await ChatApi.getSession().then(res => {\n      return res.data;\n    }, err => {\n      console.log(err);\n    });\n    //根据会话获取用户Id 列表(包括消息的发送者)\n    var userIds = this.fetchUserIds(sessions);\n\n    //获取用户实例信息\n    const userMap = await ChatApi.getUserMapByIds(userIds, vue.$userMap);\n    //组装会话列表\n    var sessionList = this.assembleSessions(sessions, userMap, vue);\n    sessionList.forEach(session => {\n      session.messages.forEach(message => {\n        message.isMe = message.sender === vue.$getUserId();\n        var user = userMap[message.sender];\n        message.userName = user.userName;\n        message.avatar = user.avatar;\n        message.time = new Date(message.serverTime).format("MM/dd hh:mm:ss");\n        message.isText = message.messageType === vue.$protocol.TEXT_MESSAGE;\n        if (!message.isText) {\n          message.imgUrl = message.content;\n        }\n      });\n    });\n    var sessionMap = {};\n    sessionList.forEach(item => {\n      sessionMap[item.key] = item;\n    });\n    Vue.prototype.$sessions = sessionList;\n    this.resortSessions(vue);\n    Vue.prototype.$sessionMap = sessionMap; // 全局会话\n  },\n\n  toBottom: function () {},\n  //滚动到底部钩子\n  initWebSocket: async function (Vue, vue) {\n    return await new Promise((resolve, reject) => {\n      var webSocket = new vue.$sparrow.webSocket("ws://chat.sparrowzoo.com/websocket", vue.$token);\n      webSocket.reconnectionAlarmCallback = function () {\n        console.log("reconnection AlarmCallback");\n      };\n      webSocket.onMsgCallback = function (data) {\n        if (data.offline) {\n          console.log("消息已发送，对方不在线，稍后会收到消息");\n          return;\n        }\n        _source_scripts_ImProtocol__WEBPACK_IMPORTED_MODULE_1__.ImProtocol.parse(data, function (protocol) {\n          var session = vue.$sessionMap[protocol.sessionKey];\n          if (protocol.chatType === _source_scripts_ImProtocol__WEBPACK_IMPORTED_MODULE_1__.ImProtocol.CHAT_TYPE_CANCEL) {\n            session.messages = session.messages.filter(message => message.clientSendTime !== protocol.clientSendTime);\n          } else {\n            //Initialization.setSessionLastReadTime(session);\n            Initialization.rebuild(protocol, vue);\n          }\n          Initialization.toBottom();\n          console.log("parse protocol:" + protocol);\n        });\n      };\n      webSocket.connect(resolve, reject);\n      Vue.prototype.$webSocket = webSocket;\n    }).then(userInfo => {\n      var userInfoArray = userInfo.split(",");\n      if (userInfoArray.length !== 2) {\n        throw new Error("用户信息错误");\n      }\n      vue.$webSocket.userId = parseInt(userInfoArray[0], 10);\n      vue.$webSocket.platform = userInfoArray[1] === "true";\n    });\n  }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/../api/Initialization.js?')},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=script&lang=js&":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************************************************************************************************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = ({\n  components: {},\n  computed: {},\n  //除了App.vue，其他的vue文件都要加上name （copilot的badcase 不对 ）\n  //除了App.vue的name，其他的vue文件命名必须是驼峰命名法\n  //https://sparrowzoo.feishu.cn/docx/RzKZdWXQioxE5vxamcec8YBencb\n  data() {\n    return {};\n  },\n  mounted() {\n    console.log("welcome to sparrow im");\n  }\n});\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/./src/App.vue?./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use%5B0%5D!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options')},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=template&id=7ba5bd90&":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??ruleSet[1].rules[3]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=template&id=7ba5bd90& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "render": function() { return /* binding */ render; },\n/* harmony export */   "staticRenderFns": function() { return /* binding */ staticRenderFns; }\n/* harmony export */ });\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    attrs: {\n      id: "app"\n    }\n  }, [_c("router-view", {\n    key: _vm.$route.fullPath\n  }), _vm.$route.path != "/chat" ? _c("van-tabbar", {\n    attrs: {\n      route: ""\n    }\n  }, [_c("van-tabbar-item", {\n    attrs: {\n      to: {\n        name: "session"\n      },\n      icon: "chat-o",\n      replace: ""\n    }\n  }, [_vm._v("消息 ")]), _c("van-tabbar-item", {\n    attrs: {\n      to: {\n        name: "contact"\n      },\n      icon: "user-o",\n      replace: ""\n    }\n  }, [_vm._v("通讯录 ")])], 1) : _vm._e()], 1);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/./src/App.vue?./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use%5B0%5D!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??ruleSet%5B1%5D.rules%5B3%5D!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options')},"./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm.js");\n/* harmony import */ var _route__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/route */ "./src/route/index.js");\n/* harmony import */ var _App__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/App */ "./src/App.vue");\n/* harmony import */ var _source_scripts_sparrow_es_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../source/scripts/sparrow_es.js */ "../../source/scripts/sparrow_es.js");\n/* harmony import */ var _source_scripts_ImProtocol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../source/scripts/ImProtocol */ "../../source/scripts/ImProtocol.js");\n/* harmony import */ var js_base64__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! js-base64 */ "./node_modules/js-base64/base64.mjs");\n/* harmony import */ var _api_Initialization__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../api/Initialization */ "../api/Initialization.js");\n/* harmony import */ var vant__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! vant */ "./node_modules/vant/es/index.js");\n/* harmony import */ var vant_lib_index_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vant/lib/index.css */ "./node_modules/vant/lib/index.css");\n/* harmony import */ var vant_lib_index_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(vant_lib_index_css__WEBPACK_IMPORTED_MODULE_5__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_api_Initialization__WEBPACK_IMPORTED_MODULE_4__]);\n_api_Initialization__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n // 引入vue\n // 引入路由\n // 引入主组件\n\n\n\n\n //  引入vant, 一个移动端的ui框架\n\nvue__WEBPACK_IMPORTED_MODULE_6__["default"].use(vant__WEBPACK_IMPORTED_MODULE_7__["default"]);\n\n// var isProd = process.env.NODE_ENV === "prod";\n// if (!isProd) {\n//   await import("vant/lib/index.css");\n//   await import("vant").then((Vant) => {\n//     Vue.use(Vant);\n//   });\n// }\nvue__WEBPACK_IMPORTED_MODULE_6__["default"].config.productionTip = false; // 关闭生产模式下给出的提示\nconst vue = new vue__WEBPACK_IMPORTED_MODULE_6__["default"]({\n  // 创建vue实例\n  router: _route__WEBPACK_IMPORTED_MODULE_0__["default"],\n  render: h => h(_App__WEBPACK_IMPORTED_MODULE_1__["default"]) // 渲染主组件\n});\n\nvue__WEBPACK_IMPORTED_MODULE_6__["default"].prototype.$sparrow = _source_scripts_sparrow_es_js__WEBPACK_IMPORTED_MODULE_2__.Sparrow;\nvue__WEBPACK_IMPORTED_MODULE_6__["default"].prototype.$Base64 = js_base64__WEBPACK_IMPORTED_MODULE_8__.Base64;\nvue__WEBPACK_IMPORTED_MODULE_6__["default"].prototype.$protocol = _source_scripts_ImProtocol__WEBPACK_IMPORTED_MODULE_3__.ImProtocol;\nvue__WEBPACK_IMPORTED_MODULE_6__["default"].prototype.$getUserId = function () {\n  if (this.$webSocket != null && this.$webSocket.userId != null) {\n    return this.$webSocket.userId;\n  }\n  console.log("兜底获取用户id");\n  // this.$webSocket.userId = await ChatApi.getUserId(this.$token()).then(res => {\n  //     return res;\n  // }, err => {\n  //     console.log(err);\n  // });\n  //return this.$webSocket.userId;\n  return null;\n};\nvue__WEBPACK_IMPORTED_MODULE_6__["default"].prototype.$init = async function () {\n  vue__WEBPACK_IMPORTED_MODULE_6__["default"].prototype.$token = _source_scripts_sparrow_es_js__WEBPACK_IMPORTED_MODULE_2__.Sparrow.user.getToken();\n  //router.token = Vue.prototype.$token;\n  await _api_Initialization__WEBPACK_IMPORTED_MODULE_4__.Initialization.initWebSocket(vue__WEBPACK_IMPORTED_MODULE_6__["default"], vue);\n  await _api_Initialization__WEBPACK_IMPORTED_MODULE_4__.Initialization.initContact(vue__WEBPACK_IMPORTED_MODULE_6__["default"], vue);\n  await _api_Initialization__WEBPACK_IMPORTED_MODULE_4__.Initialization.initSessions(vue__WEBPACK_IMPORTED_MODULE_6__["default"], vue);\n};\n//非登录页面，则初始化用户信息\n//刷新页面时执行s\nif (window.location.href.indexOf("/login") < 0) {\n  await vue.$init();\n}\nvue.$mount("#app");\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/./src/main.js?')},"./src/route/index.js":
/*!****************************!*\
  !*** ./src/route/index.js ***!
  \****************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm.js");\n/* harmony import */ var vue_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vue-router */ "./node_modules/vue-router/dist/vue-router.esm.js");\n/* harmony import */ var _source_scripts_sparrow_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../source/scripts/sparrow_es.js */ "../../source/scripts/sparrow_es.js");\n\n\n\nvue__WEBPACK_IMPORTED_MODULE_1__["default"].use(vue_router__WEBPACK_IMPORTED_MODULE_2__["default"]);\nconst router = new vue_router__WEBPACK_IMPORTED_MODULE_2__["default"]({\n  // mode: \'history\',\n  routes: [{\n    path: "/login",\n    meta: {\n      need_auth: false,\n      title: "登录"\n    },\n    name: "Login",\n    component: () => __webpack_require__.e(/*! import() */ "src_components_Login_vue").then(__webpack_require__.bind(__webpack_require__, /*! ../components/Login */ "./src/components/Login.vue"))\n  }, {\n    path: "/chat",\n    meta: {\n      need_auth: true,\n      title: "聊天窗口"\n    },\n    name: "chat",\n    component: () => __webpack_require__.e(/*! import() */ "src_components_Dialog_vue").then(__webpack_require__.bind(__webpack_require__, /*! ../components/Dialog */ "./src/components/Dialog.vue"))\n  }, {\n    path: "/new-friend",\n    meta: {\n      need_auth: true\n    },\n    name: "new-friend",\n    component: () => __webpack_require__.e(/*! import() */ "src_components_NewFriend_vue").then(__webpack_require__.bind(__webpack_require__, /*! ../components/NewFriend */ "./src/components/NewFriend.vue"))\n  }, {\n    path: "/add-friend",\n    meta: {\n      need_auth: true\n    },\n    name: "add-friend",\n    component: () => __webpack_require__.e(/*! import() */ "src_components_AddFriend_vue").then(__webpack_require__.bind(__webpack_require__, /*! ../components/AddFriend */ "./src/components/AddFriend.vue"))\n  }, {\n    path: "/me",\n    meta: {\n      need_auth: true\n    },\n    name: "me",\n    component: () => __webpack_require__.e(/*! import() */ "src_components_Me_vue").then(__webpack_require__.bind(__webpack_require__, /*! ../components/Me */ "./src/components/Me.vue"))\n  },\n  //消息\n  {\n    path: "/session",\n    meta: {\n      need_auth: true\n    },\n    name: "session",\n    component: () => __webpack_require__.e(/*! import() */ "src_components_Session_vue").then(__webpack_require__.bind(__webpack_require__, /*! ../components/Session */ "./src/components/Session.vue"))\n  }, {\n    path: "/qun",\n    meta: {\n      need_auth: true\n    },\n    name: "qun",\n    component: () => __webpack_require__.e(/*! import() */ "src_components_Qun_vue").then(__webpack_require__.bind(__webpack_require__, /*! ../components/Qun */ "./src/components/Qun.vue"))\n  }, {\n    path: "/qun-detail",\n    meta: {\n      need_auth: true\n    },\n    //按名字跳转\n    //this.$router.push({name: \'qunDetail\', query: {chatType: this.$protocol.CHAT_TYPE_1_2_N}});\n    name: "qunDetail",\n    component: () => __webpack_require__.e(/*! import() */ "src_components_QunDetail_vue").then(__webpack_require__.bind(__webpack_require__, /*! ../components/QunDetail */ "./src/components/QunDetail.vue"))\n  }, {\n    path: "/contact",\n    meta: {\n      need_auth: true\n    },\n    name: "contact",\n    component: () => __webpack_require__.e(/*! import() */ "src_components_Contact_vue").then(__webpack_require__.bind(__webpack_require__, /*! ../components/Contact */ "./src/components/Contact.vue"))\n  }]\n});\nrouter.afterEach((to, from) => {\n  console.log("route after" + from.path);\n  if (!to.meta.need_auth) {\n    console.log("route pass");\n  } else {\n    console.log("route 拒绝");\n  }\n});\nrouter.beforeEach((to, from, next) => {\n  console.log("before  from:" + from.path + ",to:" + to.path + ",from full-path " + from.fullPath + ",to full-path" + to.fullPath);\n  console.log("before  meta:" + from.meta);\n  if (!to.meta.need_auth) {\n    next();\n    return;\n  }\n  if (_source_scripts_sparrow_es_js__WEBPACK_IMPORTED_MODULE_0__.Sparrow.user.getToken() != null) {\n    next();\n    return;\n  }\n  console.log("route 拒绝");\n});\n/* harmony default export */ __webpack_exports__["default"] = (router);\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/./src/route/index.js?')},"./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css&":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "\\n#app {\\n  padding-bottom: 4rem;\\n}\\n", ""]);\n// Exports\n/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/./src/App.vue?./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use%5B1%5D!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use%5B2%5D!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options')},"./node_modules/vue-style-loader/index.js??clonedRuleSet-12.use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css&":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-style-loader/index.js??clonedRuleSet-12.use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/function(module,__unused_webpack_exports,__webpack_require__){eval('// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css& */ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use[1]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use[2]!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css&");\nif(content.__esModule) content = content.default;\nif(typeof content === \'string\') content = [[module.id, content, \'\']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = (__webpack_require__(/*! !../node_modules/vue-style-loader/lib/addStylesClient.js */ "./node_modules/vue-style-loader/lib/addStylesClient.js")["default"])\nvar update = add("520e8f5d", content, false, {"sourceMap":false,"shadowMode":false});\n// Hot Module Replacement\nif(false) {}\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/./src/App.vue?./node_modules/vue-style-loader/index.js??clonedRuleSet-12.use%5B0%5D!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-12.use%5B1%5D!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-12.use%5B2%5D!./node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options')},"data:font/woff2;charset=utf-8;base64,":

  !*** data:font/woff2;charset=utf-8;base64, ***!
function(module){"use strict";eval('module.exports = "data:font/woff2;charset=utf-8;base64,";\n\n//# sourceURL=webpack://Sparrow-MOBILE-CHAT/data:font/woff2;charset=utf-8;base64,?')}},function(e){var n=function(n){return e(e.s=n)};e.O(0,["npm.vant","npm.core-js","npm.vue","npm.vue-router","npm.vue-lazyload","chunk-vendors"],(function(){return n("./src/main.js")}));e.O()}]);