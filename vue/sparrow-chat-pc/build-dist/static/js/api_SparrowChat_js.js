"use strict";(self["webpackChunkSparrow_PC_CHAT"]=self["webpackChunkSparrow_PC_CHAT"]||[]).push([["api_SparrowChat_js"],{"../api/SparrowChat.js":
/*!*****************************!*\
  !*** ../api/SparrowChat.js ***!
  \*****************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ChatApi": function() { return /* binding */ ChatApi; }\n/* harmony export */ });\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ "./node_modules/core-js/modules/es.array.push.js");\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__);\n\nconst SPARROW_BASE_URL = "http://www.sparrowzoo.com";\nconst CONSUMER_BASE_URL = ({"NODE_ENV":"prod","VUE_APP_SPARROW_BASE_URL":"http://www.sparrowzoo.com","VUE_APP_SPARROW_WEBSOCKET":"ws://www.sparrowzoo.com","BASE_URL":"/chat/pc/"}).VUE_APP_CONSUMER_BASE_URL;\nconsole.log(CONSUMER_BASE_URL);\nconsole.log(SPARROW_BASE_URL);\nconst ChatApi = {\n  getSession: async function getSession() {\n    return await Sparrow.http.syncPost(SPARROW_BASE_URL + "/chat/v2/sessions");\n  },\n  getUserId: async function () {\n    return await Sparrow.http.syncPost(SPARROW_BASE_URL + "/get-user-id").then(res => {\n      return res.data;\n    }, err => {\n      console.log(err);\n    });\n  },\n  getContacts: async function () {\n    return await Sparrow.http.syncPost(SPARROW_BASE_URL + "/contact/contacts");\n  },\n  setRead: function (session, vue) {\n    const params = {\n      sessionKey: session.key\n    };\n    return Sparrow.http.syncPost(SPARROW_BASE_URL + "/chat/v2/session/read", params).then(res => {\n      session.lastReadTime = new Date();\n      vue.$initialization.assembleLastMessage(session);\n      vue.$initialization.resortSessions(vue);\n      return res.data;\n    }, err => {\n      console.log(err);\n    });\n  },\n  cancelMsg: async function (params) {\n    return await Sparrow.http.syncPost(SPARROW_BASE_URL + "/chat/v2/cancel", params).then(res => {\n      return res.data;\n    }, err => {\n      console.log(err);\n    });\n  },\n  login: function (captcha, userName, password) {\n    const params = {\n      captcha: captcha,\n      userName: userName,\n      password: password,\n      areaCode: ""\n    };\n    return Sparrow.http.syncPost(SPARROW_BASE_URL + "/shortcut-login", params);\n  },\n  getUserByIdentify: function (identify) {\n    const params = {\n      userIdentify: identify\n    };\n    return Sparrow.http.syncPost(SPARROW_BASE_URL + "/contact/find-friend", params).then(result => {\n      return result;\n    }, err => {\n      console.log(err);\n    });\n  },\n  getUserById: async function (id, userMap) {\n    if (userMap != null && userMap[id] != null) {\n      return userMap[id];\n    }\n    const params = "id=" + id;\n    return await Sparrow.http.syncPost(CONSUMER_BASE_URL + "/app/message/findById?" + params).then(function (res) {\n      return res.data;\n    });\n  },\n  getUserMapByIds: async function (idArr, localUserCache) {\n    //如果idArr为空，直接返回空对象\n    if (!Array.isArray(idArr) || idArr.length === 0) {\n      return {};\n    }\n    var userId = -1;\n    var i = 0;\n    try {\n      var userResultMap = {};\n      var needRemoteFetchIdArr = [];\n      //先从本地缓存中获取,并且将本地缓存中没有的id放入needRemoteFetchIdArr\n      for (i = 0; i < idArr.length; i++) {\n        userId = idArr[i];\n        if (localUserCache[userId] != null) {\n          userResultMap[userId] = localUserCache[userId];\n        } else {\n          needRemoteFetchIdArr.push(userId);\n        }\n      }\n      //needRemoteFetchIdArr = [7, 69];\n      //如果本地缓存中已经包含了所有的id，则直接返回\n      if (needRemoteFetchIdArr.length === 0) {\n        return userResultMap;\n      }\n      //如果本地缓存中没有，则从远程获取\n      const remoteUsers = await Sparrow.http.syncPost(SPARROW_BASE_URL + "/contact/get-users-by-ids", needRemoteFetchIdArr).then(function (res) {\n        return res.data;\n      }, function (error) {\n        console.log(error.message);\n        return userResultMap;\n      });\n      if (remoteUsers == null || remoteUsers.length === 0) {\n        return userResultMap;\n      }\n      for (i = 0; i < remoteUsers.length; i++) {\n        userId = remoteUsers[i].userId;\n        var user = remoteUsers[i];\n        user.platform = !!user.isCustomer;\n        //将远程获取的用户信息放入本地缓存\n        localUserCache[userId] = remoteUsers[i];\n        //将远程获取的用户信息放入返回结果\n        userResultMap[userId] = remoteUsers[i];\n      }\n      return userResultMap;\n    } catch (e) {\n      console.error(e);\n      return {};\n    }\n  },\n  addFriendById: function (friendSecretIdentify) {\n    const params = {\n      friendSecretIdentify: friendSecretIdentify,\n      reason: ""\n    };\n    return Sparrow.http.syncPost(SPARROW_BASE_URL + "/contact/apply-friend", params);\n  },\n  removeFriend: function (id) {\n    const params = "id=" + id;\n    return Sparrow.http.syncPost(CONSUMER_BASE_URL + "/app/message/removeFriend", params);\n  },\n  newFriendList: function () {\n    return Sparrow.http.syncGet(SPARROW_BASE_URL + "/contact/friend-apply-list");\n  },\n  qunMemberApplyList: function (qunId) {\n    return Sparrow.http.syncPost(SPARROW_BASE_URL + "/contact/qun-member-apply-list", "qunId=" + qunId);\n  },\n  auditFriend: function (auditId, agree) {\n    const params = {\n      agree: agree,\n      auditId: auditId,\n      reason: ""\n    };\n    return Sparrow.http.syncPost(SPARROW_BASE_URL + "/contact/audit-friend-apply", params);\n  },\n  auditQunMember: function (auditId, agree) {\n    const params = {\n      agree: agree,\n      auditId: auditId,\n      reason: ""\n    };\n    return Sparrow.http.syncPost(SPARROW_BASE_URL + "/contact/audit-qun-apply", params);\n  },\n  existGroup: function (id) {\n    const params = "groupId=" + id;\n    return Sparrow.http.syncPost(CONSUMER_BASE_URL + "/app/message/quitGroup", params);\n  },\n  modifyGroup: function (id, name, avatar) {\n    const params = "groupId=" + id + "&name=" + name + "&avatar=" + avatar;\n    return Sparrow.http.syncPost(CONSUMER_BASE_URL + "/app/message/changeGroup", params);\n  },\n  platformServices: function () {\n    return {\n      code: 0\n    };\n  }\n};\n\n\n//# sourceURL=webpack://Sparrow-PC-CHAT/../api/SparrowChat.js?')}}]);