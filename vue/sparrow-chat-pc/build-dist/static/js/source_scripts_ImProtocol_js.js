"use strict";
(self["webpackChunkSparrow_PC_CHAT"] =
  self["webpackChunkSparrow_PC_CHAT"] || []).push([
  ["source_scripts_ImProtocol_js"],
  {
    "../../source/scripts/ImProtocol.js":
      /*!******************************************!*\
  !*** ../../source/scripts/ImProtocol.js ***!
  \******************************************/ function (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) {
        eval(
          '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "ImProtocol": function() { return /* binding */ ImProtocol; }\n/* harmony export */ });\n/* harmony import */ var core_js_modules_esnext_typed_array_to_reversed_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/esnext.typed-array.to-reversed.js */ "./node_modules/core-js/modules/esnext.typed-array.to-reversed.js");\n/* harmony import */ var core_js_modules_esnext_typed_array_to_reversed_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_typed_array_to_reversed_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_esnext_typed_array_to_sorted_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/esnext.typed-array.to-sorted.js */ "./node_modules/core-js/modules/esnext.typed-array.to-sorted.js");\n/* harmony import */ var core_js_modules_esnext_typed_array_to_sorted_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_typed_array_to_sorted_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_esnext_typed_array_with_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/esnext.typed-array.with.js */ "./node_modules/core-js/modules/esnext.typed-array.with.js");\n/* harmony import */ var core_js_modules_esnext_typed_array_with_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_typed_array_with_js__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n//im 封装的底层通信协议 保证对前台的协议是一致的\nvar ImProtocol = function (\n//聊天类型 0:1对1单聊 1:一对多群聊\nchatType,\n//消息类型 0:文本消息 1:图片消息\nmsgType,\n//当前用户id [当前用户ID可以不传]\nsender,\n//接收方ID\nreceiver,\n// 会话key,如果是1对一会话，可以不传\nsessionKey,\n//消息内容\nmsg,\n//客户端发送时间\nclientSendTime) {\n  this.chatType = chatType;\n  this.msgType = msgType;\n  this.sender = sender;\n  this.receiver = receiver;\n  this.sessionKey = sessionKey;\n  this.msg = msg;\n  this.clientSendTime = clientSendTime;\n};\n\n//文件消息标识\nImProtocol.TEXT_MESSAGE = 0;\n//图片消息标识\nImProtocol.IMAGE_MESSAGE = 1;\n//1对1单聊\nImProtocol.CHAT_TYPE_1_2_1 = 0;\n//一对多群聊\nImProtocol.CHAT_TYPE_1_2_N = 1;\n//撤消消息\nImProtocol.CHAT_TYPE_CANCEL = 2;\nImProtocol.CHAT_TYPE_LENGTH = 1;\nImProtocol.MSG_TYPE_LENGTH = 1;\nImProtocol.prototype.toBytes = function () {\n  var currentUserId = parseInt(this.sender, 10);\n  var currentUserIdBytes = currentUserId.toBytes();\n  var currentUserIdLength = currentUserIdBytes.length;\n  var sessionKeyBytes = null;\n  var sessionKeyBytesLength = null;\n  var sessionKeyLengthBytes = null;\n  var sessionKeyLengthLength = 4; //int 4bytes\n\n  var receiverBytes = null;\n  var receiverLength = 4; //int 4bytes\n  if (this.chatType === ImProtocol.CHAT_TYPE_1_2_N) {\n    sessionKeyBytes = this.sessionKey.toArrayBuffer();\n    //session key 字节的长度\n    sessionKeyBytesLength = sessionKeyBytes.length;\n    //session key length\'s bytes\n    sessionKeyLengthBytes = sessionKeyBytesLength.toBytes();\n    //session key length\'s bytes length\n    sessionKeyLengthLength = 4; //int 4bytes\n  } else {\n    receiverBytes = this.receiver.toBytes();\n  }\n  var contentBytes = this.msgType === ImProtocol.TEXT_MESSAGE ? this.msg.toArrayBuffer() : this.msg;\n  var msgLength = this.msgType === ImProtocol.TEXT_MESSAGE ? contentBytes.length : this.msg.byteLength;\n  var msgLengthBytes = msgLength.toBytes();\n  var msgLengthLength = 4; //int 4bytes\n  var sendTimeBytes = (this.clientSendTime + "").toArrayBuffer();\n  var sendTimeLength = sendTimeBytes.length;\n  var totalLength = 0;\n  if (this.chatType === ImProtocol.CHAT_TYPE_1_2_N) {\n    totalLength = ImProtocol.CHAT_TYPE_LENGTH + ImProtocol.MSG_TYPE_LENGTH + currentUserIdLength +\n    //4\n    sessionKeyLengthLength +\n    //4\n    sessionKeyBytesLength + msgLengthLength +\n    //4\n    msgLength + sendTimeLength;\n  } else {\n    totalLength = ImProtocol.CHAT_TYPE_LENGTH + ImProtocol.MSG_TYPE_LENGTH + currentUserIdLength +\n    //4\n    receiverLength +\n    //4\n    msgLengthLength +\n    //4\n    msgLength + sendTimeLength;\n  }\n  let result = new Uint8Array(totalLength);\n  var offset = 0;\n  result.set([this.chatType, this.msgType], offset);\n  offset += ImProtocol.CHAT_TYPE_LENGTH + ImProtocol.MSG_TYPE_LENGTH;\n  result.set(currentUserIdBytes, offset);\n  offset += currentUserIdLength;\n  if (this.chatType === ImProtocol.CHAT_TYPE_1_2_N) {\n    result.set(sessionKeyLengthBytes, offset);\n    offset += sessionKeyLengthLength;\n    result.set(sessionKeyBytes, offset);\n    offset += sessionKeyBytesLength;\n  } else {\n    result.set(receiverBytes, offset);\n    offset += receiverLength;\n  }\n  result.set(msgLengthBytes, offset);\n  offset += msgLengthLength;\n  result.set(contentBytes, offset);\n  offset += msgLength;\n  result.set(sendTimeBytes, offset);\n  return result;\n};\nImProtocol.cancel = function (dataView, buf, callback) {\n  var offset = 0;\n  var chatType = dataView.getUint8(offset);\n  console.log("撤销协议");\n  offset += 1;\n  const sessionKeyLength = dataView.getInt32(offset);\n  offset += 4; //session key length=4\n  const sessionKeyBuffer = buf.slice(offset, sessionKeyLength + offset);\n  offset += sessionKeyLength;\n  const sessionKey = new Uint8Array(sessionKeyBuffer).toString();\n  const clientSendTimeLength = dataView.getInt32(offset);\n  offset += 4; //session key length=4\n  const clientSendTimeBuffer = buf.slice(offset, clientSendTimeLength + offset);\n  const clientSendTime = +new Uint8Array(clientSendTimeBuffer).toString();\n  console.log(sessionKeyLength, sessionKey, clientSendTime);\n  callback({\n    chatType: chatType,\n    clientSendTime: clientSendTime,\n    sessionKey: sessionKey\n  });\n};\n//收到推送的消息\nImProtocol.parse = async function (blob, callback) {\n  //当客户端收到服务端发来的消息时，触发onmessage事件，\n  // 参数e.data包含server传递过来的数据\n  const buf = await blob.arrayBuffer();\n  var offset = 0;\n  var dataView = new DataView(buf);\n  var chatType = dataView.getUint8(offset);\n  // 服务器撤消事件推送\n  if (chatType === 2) {\n    ImProtocol.cancel(dataView, buf, callback);\n    return;\n  }\n  var receiver = null;\n  var sessionKey = null;\n  var text = null;\n  var msgBuffer = null;\n  var sender = null;\n  var clientSendTime = null;\n  var serverTime = null;\n\n  //正常接收消息推送\n  offset += ImProtocol.CHAT_TYPE_LENGTH; //chat type length=1\n  var msgType = dataView.getUint8(offset);\n  offset += ImProtocol.MSG_TYPE_LENGTH; //msg type length=1\n  //消息来源 对方用户id\n  //因为是接收消息，所以fromUserId就是对方用户id\n  sender = dataView.getInt32(offset);\n  offset += 4; //from user id length=4\n  if (chatType === ImProtocol.CHAT_TYPE_1_2_1) {\n    //因为是接收消息，所以currentUserId是接收人ID，即当前用户ID\n    receiver = dataView.getInt32(offset);\n    sessionKey = ImProtocol.generate121SessionKey(sender, receiver);\n    offset += 4;\n  }\n  if (chatType === ImProtocol.CHAT_TYPE_1_2_N) {\n    //群聊获取session key\n    var sessionKeyLength = dataView.getInt32(offset);\n    offset += 4; //session key length=4\n    const sessionKeyBuffer = buf.slice(offset, sessionKeyLength + offset);\n    offset += sessionKeyLength;\n    //构建session key\n    sessionKey = new Uint8Array(sessionKeyBuffer).toString();\n  }\n\n  //实际的消息长度\n  var msgLength = dataView.getInt32(offset);\n  offset += 4; //msg length =4\n\n  //文本消息解析\n  if (msgType === ImProtocol.TEXT_MESSAGE) {\n    const msgBuffer = buf.slice(offset, offset + msgLength);\n    const chars = new Uint8Array(msgBuffer);\n    text = chars.toString();\n    //console.log(this.msg);\n  } else {\n    //图片消息解析\n    //const img = document.getElementById(\'img\');\n    msgBuffer = buf.slice(offset, offset + msgLength);\n  }\n  offset += msgLength;\n  //客户端发送时间【对方传过来】\n  var clientTimeServiceTimePair = new Uint8Array(buf.slice(offset, buf.byteLength)).toString();\n  console.log("im protocol ", JSON.stringify(clientTimeServiceTimePair));\n  var clientServiceTimeArray = clientTimeServiceTimePair.split("_");\n  clientSendTime = parseInt(clientServiceTimeArray[0], 10);\n  serverTime = parseInt(clientServiceTimeArray[1], 10);\n  callback({\n    chatType: chatType,\n    msgType: msgType,\n    sender: sender,\n    receiver: receiver,\n    msg: msgType === ImProtocol.TEXT_MESSAGE ? text : msgBuffer,\n    clientSendTime: clientSendTime,\n    serverTime: serverTime,\n    sessionKey: sessionKey\n  });\n};\nImProtocol.getOppositeUser = function (vue, session) {\n  // 如果有session 则以session 优先否则以queryString 优先\n  var sessionKey = session ? session.chatSession.id : vue.$route.query.key;\n  if (Sparrow.isNullOrEmpty(sessionKey)) {\n    //会在?token=###&targetUserId=n的url 初始化session 列表的对方id\n    //所以以session 优先\n    var oppositeUserId = vue.$route.query.targetUserId;\n    if (oppositeUserId != null) {\n      //有临时会话 直接返回\n      return parseInt(oppositeUserId, 10);\n    }\n    return null;\n  }\n  var sessionArray = sessionKey.split("_");\n  if (sessionArray.length < 2) {\n    return -1;\n  }\n  var userId1 = parseInt(sessionArray[0], 10);\n  var userId2 = parseInt(sessionArray[1], 10);\n  if (userId1 === vue.$getUserId()) {\n    return userId2;\n  }\n  return userId1;\n};\nImProtocol.generate121SessionKey = function (userId, userId2) {\n  if (userId < userId2) {\n    return userId + "_" + userId2;\n  }\n  return userId2 + "_" + userId;\n};\n\n\n//# sourceURL=webpack://Sparrow-PC-CHAT/../../source/scripts/ImProtocol.js?'
        );
      },
  },
]);
