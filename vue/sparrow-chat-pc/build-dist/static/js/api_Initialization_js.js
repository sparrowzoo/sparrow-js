"use strict";(self["webpackChunkSparrow_PC_CHAT"]=self["webpackChunkSparrow_PC_CHAT"]||[]).push([["api_Initialization_js"],{"../api/Initialization.js":
/*!********************************!*\
  !*** ../api/Initialization.js ***!
  \********************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Initialization": function() { return /* binding */ Initialization; }\n/* harmony export */ });\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ "./node_modules/core-js/modules/es.array.push.js");\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__);\n\nconst WEBSOCKET_BASE_URL = "ws://www.sparrowzoo.com";\nconsole.log("VUE_APP_SPARROW_WEBSOCKET" + WEBSOCKET_BASE_URL);\nvar Initialization = {\n  initPlatformService: async function (Vue, vue) {\n    var res = await vue.$chatApi.platformServices();\n    if (res.code === 200) {\n      Vue.prototype.$platformServers = res.rows;\n      res.rows.forEach(user => {\n        user.platform = true;\n        Vue.prototype.$userMap[user.userId] = user;\n      });\n    }\n    console.log("res", res);\n  },\n  initContact: async function (Vue, vue) {\n    var res = await vue.$chatApi.getContacts();\n    Vue.prototype.$contact = res.data;\n    console.log("res", res);\n    var userMap = {};\n    if (res.data.users) {\n      res.data.users.forEach(user => {\n        userMap[user.userId] = user;\n      });\n    }\n    Vue.prototype.$userMap = userMap;\n    var qunMap = {};\n    if (res.data.quns) {\n      res.data.quns.forEach(qun => {\n        qunMap[qun.qunId] = qun;\n      });\n    }\n    Vue.prototype.$qunMap = qunMap;\n    // console.log("userMap", userMap);\n  },\n\n  _oppositeUser: function (session, vue) {\n    return vue.$protocol.getOppositeUser(vue, session);\n  },\n  fetchUserIds: function (sessions, vue) {\n    var userIds = [];\n    sessions.forEach(session => {\n      //考虑接收方和发送方的 消息拉取逻辑\n      var oppositeUser = this._oppositeUser(session, vue);\n      if (userIds.indexOf(oppositeUser) < 0) {\n        userIds.push(oppositeUser);\n        userIds.push(vue.$getUserId());\n      }\n      session.messages.forEach(message => {\n        if (userIds.indexOf(message.sender) < 0) {\n          userIds.push(message.sender);\n        }\n      });\n    });\n    return userIds;\n  },\n  assembleSessions: function (sessions, userMap, vue) {\n    var sessionList = [];\n    //组装会话列表\n    sessions.forEach(session => {\n      var chatSession = session.chatSession;\n      const chatType = chatSession.chatType; //1群 0单聊\n      const sessionKey = chatSession.sessionKey; //唯一id，1 2 N群ID\n      var newSession = null;\n      if (chatType === vue.$protocol.CHAT_TYPE_1_2_1) {\n        //获取对方用户信息\n        var oppositeUserId = this._oppositeUser(session, vue);\n        var oppositeUser = userMap[oppositeUserId];\n        // 普通用户\n        if (!oppositeUser) {\n          return null;\n        }\n        newSession = {\n          key: sessionKey,\n          //session 类型\n          type: chatType,\n          //session 头象\n          icon: oppositeUser.avatar,\n          lastReadTime: session.lastReadTime,\n          flag: oppositeUser.flagUrl,\n          //session 名称 对方的昵称\n          title: oppositeUser.userName,\n          //对方ID\n          oppositeUserId: oppositeUser.userId,\n          //消息列表\n          messages: session.messages\n        };\n      }\n      if (chatType === vue.$protocol.CHAT_TYPE_1_2_N) {\n        var qun = vue.$qunMap[sessionKey];\n        newSession = {\n          key: sessionKey,\n          type: chatType,\n          title: qun.qunName,\n          messages: session.messages,\n          icon: qun.unitIcon,\n          avatar: qun.avatar,\n          lastReadTime: session.lastReadTime\n        };\n      }\n      this.assembleLastMessage(newSession, vue);\n      sessionList.push(newSession);\n    });\n    return sessionList;\n  },\n  resortSessions: function (vue) {\n    vue.$sessions = vue.$sessions.sort(function (a, b) {\n      if (b.lastReadTime === a.lastReadTime) {\n        return 0;\n      }\n      return b.lastReadTime > a.lastReadTime ? 1 : -1;\n    });\n  },\n  initActiveSession: async function (vue) {\n    var key = vue.$route.query.key;\n    var targetUserId = vue.$route.query.targetUserId;\n    if (key == null && targetUserId == null) {\n      //如果没有指定session key 则默认取第一个,即最近的聊天\n      vue.activeSession = vue.sessionList[0];\n      return;\n    }\n    var oppositeUser = null;\n    //临时会话\n    if (targetUserId != null) {\n      await vue.$chatApi.getUserById(targetUserId, vue);\n      oppositeUser = vue.$userMap[targetUserId];\n      key = this.get121Session(oppositeUser, vue);\n      vue.activeSession = vue.$sessionMap[key];\n      return;\n    }\n    //如果指定了session key 则取指定的session\n    //说明是一对一单聊\n    if (typeof key == "string" && key.indexOf("_") > -1) {\n      var oppositeId = vue.$protocol.getOppositeUser(vue);\n      oppositeUser = vue.$userMap[oppositeId];\n      this.get121Session(oppositeUser, vue);\n    } else {\n      var qun = vue.$qunMap[key];\n      this.getQunSession(qun, vue);\n    }\n    vue.activeSession = vue.$sessionMap[key];\n  },\n  setSessionLastReadTime: function (session) {\n    session.lastReadTime = new Date().getTime() + 2;\n  },\n  rebuild: function (protocol, vue) {\n    var sender = vue.$userMap[protocol.sender];\n    var imgUrl = null;\n    if (protocol.msgType === vue.$protocol.IMAGE_MESSAGE) {\n      var fileBlob = new Blob([protocol.msg]);\n      imgUrl = window.URL.createObjectURL(fileBlob);\n    }\n    var message = {\n      id: protocol.clientSendTime,\n      chatType: protocol.chatType,\n      sender: protocol.sender,\n      clientSendTime: protocol.clientSendTime,\n      serverTime: protocol.clientSendTime,\n      //新消息默认与本地时间一致\n      messageType: protocol.msgType,\n      content: protocol.msg,\n      imgUrl: imgUrl,\n      isMe: protocol.sender === vue.$getUserId(),\n      userName: sender.userName,\n      avatar: sender.avatar,\n      isText: protocol.msgType === vue.$protocol.TEXT_MESSAGE,\n      session: protocol.chatType === vue.$protocol.CHAT_TYPE_1_2_N ? protocol.sessionKey : vue.$protocol.generate121SessionKey(protocol.sender, protocol.receiver)\n    };\n    var session = vue.$sessionMap[message.session];\n    var lastMessageTime = session.lastMessageTime;\n    if (message.serverTime - lastMessageTime > 1000 * 5) {\n      message.time = new Date(protocol.clientSendTime).format("MM/dd hh:mm:ss");\n    }\n    session.messages.push(message);\n    this.assembleLastMessage(session, vue);\n  },\n  //组装1对1会话 和具体业务相关\n  get121Session: function (friend, vue) {\n    var currentUserId = vue.$getUserId();\n    //通讯录好友聊天，一定存在对方用户\n    var sessionKey = vue.$protocol.generate121SessionKey(friend.userId, currentUserId);\n    var session = vue.$sessionMap[sessionKey];\n    if (session != null) {\n      return sessionKey;\n    }\n    session = {\n      platform: !!friend.platform,\n      //1对1的key\n      key: sessionKey,\n      //发送方ID\n      type: vue.$protocol.CHAT_TYPE_1_2_1,\n      //session 头象\n      icon: friend.avatar,\n      flag: friend.flagUrl,\n      //session 名称 对方的昵称\n      title: friend.userName,\n      //消息列表\n      messages: [],\n      oppositeUserId: friend.userId,\n      lastReadTime: 0\n    };\n    vue.$sessions.push(session);\n    vue.$sessionMap[session.key] = session;\n    return session.key;\n  },\n  getQunSession: function (qun, vue) {\n    //通讯录好友聊天，一定存在对方用户\n    var sessionKey = qun.qunId;\n    var session = vue.$sessionMap[sessionKey];\n    if (session != null) {\n      return sessionKey;\n    }\n    session = {\n      key: sessionKey,\n      //发送方ID\n      type: vue.$protocol.CHAT_TYPE_1_2_N,\n      //session 头象\n      icon: qun.avatar,\n      title: qun.qunName,\n      //消息列表\n      messages: [],\n      lastReadTime: 0\n    };\n    vue.$sessions.push(session);\n    vue.$sessionMap[session.key] = session;\n    return session.key;\n  },\n  assembleLastMessage(session, vue) {\n    if (session.messages == null || session.messages.length === 0) {\n      return;\n    }\n    var lastMessage = null;\n    var lastMessageTime = null;\n    var lastMessageContent = null;\n    lastMessage = session.messages[session.messages.length - 1]; //最后收到的一条消息\n    lastMessageTime = lastMessage.serverTime; //最后一条消息的发送时间\n    lastMessageContent = lastMessage.messageType === 1 ? "/图片/" : lastMessage.content;\n    const unReadCount = session.messages.filter(message => message.serverTime >= session.lastReadTime).length;\n\n    //最后一条消息的发送时间\n    session.lastMessageTime = lastMessageTime;\n    session.time = new Date(lastMessageTime).format("MM/dd hh:mm:ss");\n    session.lastMessageContent = lastMessageContent;\n    session.unReadCount = unReadCount;\n  },\n  initSessions: async function (Vue, vue) {\n    //获取当前用户的所有会话\n    var sessions = await vue.$chatApi.getSession().then(res => {\n      return res.data;\n    }, err => {\n      console.log(err);\n    });\n    //根据会话获取用户Id 列表(包括消息的发送者)\n    var userIds = this.fetchUserIds(sessions, vue);\n\n    //获取用户实例信息\n    const userMap = await vue.$chatApi.getUserMapByIds(userIds, vue.$userMap);\n    //组装会话列表\n    var sessionList = this.assembleSessions(sessions, userMap, vue);\n    sessionList.forEach(session => {\n      var lastTime = 0;\n      for (var i = 0; i < session.messages.length; i++) {\n        var message = session.messages[i];\n        message.isMe = message.sender === vue.$getUserId();\n        var user = userMap[message.sender];\n        if (!user) {\n          console.log("user is not found!");\n          continue;\n        }\n        message.userName = user.userName;\n        message.avatar = user.avatar;\n        if (message.serverTime - lastTime > 1000 * 5) {\n          message.time = new Date(message.serverTime).format("MM/dd hh:mm:ss");\n        } else {\n          message.time = "";\n        }\n        message.isText = message.messageType === vue.$protocol.TEXT_MESSAGE;\n        if (!message.isText) {\n          message.imgUrl = message.content;\n        }\n        lastTime = message.serverTime;\n      }\n    });\n    var sessionMap = {};\n    sessionList.forEach(item => {\n      sessionMap[item.key] = item;\n    });\n    Vue.prototype.$sessions = sessionList;\n    this.resortSessions(vue);\n    Vue.prototype.$sessionMap = sessionMap; // 全局会话\n  },\n\n  toBottom: function () {},\n  //滚动到底部钩子\n  initWebSocket: async function (Vue, vue) {\n    return await new Promise((resolve, reject) => {\n      var webSocket = new vue.$sparrow.webSocket(WEBSOCKET_BASE_URL + "/websocket", vue.$token);\n      webSocket.reconnectionAlarmCallback = function () {\n        console.log("reconnection AlarmCallback");\n      };\n      webSocket.onMsgCallback = function (data) {\n        if (data.offline) {\n          console.log("消息已发送，对方不在线，稍后会收到消息");\n          return;\n        }\n        vue.$protocol.parse(data, async function (protocol) {\n          var session = vue.$sessionMap[protocol.sessionKey];\n          if (session == null) {\n            var oppositeUser = null;\n            var senderId = protocol.sender;\n            var key = null;\n            //临时会话\n            await vue.$chatApi.getUserById(senderId, vue);\n            var oppositeUser = vue.$userMap[senderId];\n            key = vue.$initialization.get121Session(oppositeUser, vue);\n            vue.activeSession = vue.$sessionMap[key];\n          }\n          if (protocol.chatType === vue.$protocol.CHAT_TYPE_CANCEL) {\n            session.messages = session.messages.filter(message => message.clientSendTime !== protocol.clientSendTime);\n          } else {\n            //Initialization.setSessionLastReadTime(session);\n            Initialization.rebuild(protocol, vue);\n          }\n          Initialization.toBottom();\n          console.log("parse protocol:" + protocol);\n        });\n      };\n      webSocket.connect(resolve, reject);\n      Vue.prototype.$webSocket = webSocket;\n    }).then(userInfo => {\n      var userInfoArray = userInfo.split(",");\n      if (userInfoArray.length !== 2) {\n        throw new Error("用户信息错误");\n      }\n      vue.$webSocket.userId = parseInt(userInfoArray[0], 10);\n      vue.$webSocket.platform = userInfoArray[1] === "true";\n    });\n  }\n};\n\n\n//# sourceURL=webpack://Sparrow-PC-CHAT/../api/Initialization.js?')}}]);